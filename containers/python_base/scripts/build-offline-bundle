#!/usr/bin/env bash
# Generate `offline-bundle` zipfile.
#
# This bundle contains:
#   * opentdf-backend.zip: a zip file of this project's main branch
#   * opentdf-service-images.tar, containing all microservices
#   * third-party-images.tar, useful third party images
#   * Client libraries and scripts
#   * TK Helm charts for deploying the servicesin a k8s cluster
#
# Parameters:
#    MONOLOG_LEVEL: 
#    SERVICE_IMAGE_TAG: tag to apply to all source images

APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
export PATH="$PATH:$APP_DIR"

monolog TRACE "Running [$0${1+ }$*]"

if ! cd "$PROJECT_ROOT"; then
  monolog ERROR "Unable to find project root [${PROJECT_ROOT}] from APP_DIR=[${APP_DIR}]"
  exit 1
fi

mkdir -p build/export

today="$(date +%Y-%m-%d)"
digest="$(git rev-parse --short HEAD)"
suffix="${today}-${digest}"
: "${SERVICE_IMAGE_TAG:="sha-${digest}"}"
: "${SERVICE_CHART_TAG:="0.0.0-sha-${digest}"}"

export SERVICE_IMAGE_TAG

echo "${SERVICE_IMAGE_TAG}" > build/export/BUNDLE_TAG

# EXPORT SERVICES SOURCE AS ZIP FILE
monolog TRACE "Exporting archive as [build/export/opentdf-backend-${suffix}.zip]"
if ! git archive --format=zip --prefix=opentdf-backend "--output=build/export/opentdf-backend-${suffix}.zip" main; then
  monolog ERROR "Failed to create source content archive, opentdf-backend-${suffix}.zip"
  exit 1
fi

# TODO(PLAT-1417) add 'abacus' and 'storage' once those are published to ghcr.io
# Also what are their tags?
to_save=()
for x in attributes claims entitlements kas keycloak keycloak-bootstrap; do
  i="ghcr.io/opentdf/${x}:${SERVICE_IMAGE_TAG}"
  if ! docker pull "$i"; then
    monolog ERROR "Failed to pull docker image ${i}"
    exit 1
  fi
  to_save+=( "$i" )
done

monolog TRACE "Save docker images as [build/export/opentdf-service-images-${suffix}.tar] from [${to_save[*]}]"
if ! docker save -o "build/export/opentdf-service-images-${suffix}.tar" "${to_save[@]}"; then
  monolog ERROR "Failed to save docker images ${to_save[*]}"
  exit 1
fi

# third party items
save-third-party() {
  local short_name="$1"
  local name_tag="$2"
  local sha="$3"
  local version="${name_tag}@sha256:${sha}"
  local path="build/export/third-party-image-${short_name}-${suffix}"
  local tar_path="${path}.tar"
  monolog TRACE "Save docker images as [${tar_path}] from [${version}]"
  if ! docker pull "${version}"; then
    monolog ERROR "Failed to pull docker image [${version}]"
    exit 1
  fi
  if ! docker save -o "${tar_path}" "${version}"; then
    monolog ERROR "Failed to save docker image [${version}] as [${tar_path}]"
    exit 1
  fi
  # Required information for tagging image locally
  if ! echo "$version" "$name_tag" >"${path}.meta"; then
    monolog ERROR "Failed to save tag metadata for docker image [${version}] to [${path}.meta]"
    exit 1
  fi
}

# NOTE: Configure third party bundles to use the latest version manually.
# To do this, search for the version you want of each of the following pacakges
# on Docker Hub

# KIND: https://kind.sigs.k8s.io/docs/user/working-offline/
# Update URI: https://hub.docker.com/r/kindest/node/tags
save-third-party kind kindest/node:v1.23.5 69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6

# postgresql
# Update URI: https://hub.docker.com/r/bitnami/postgresql/tags
save-third-party postgresql bitnami/postgresql:v12.8.0 ff0644fea98b51f111cff32c0a4eea49cafe644087d723544c2d2a955eea7a69
# Keycloak: Since we are bulding a custom image, we don't include that in thirdparty but in primary bundle

# Third party helm charts
if ! helm pull --repo https://kubernetes.github.io/ingress-nginx --version 4.0.16 --destination charts ingress-nginx; then
  monolog ERROR "Unable to helm pull ingress-nginx"
  exit 1
fi
if ! helm pull --repo https://codecentric.github.io/helm-charts --version 17.0.1 --destination charts keycloak; then
  monolog ERROR "Unable to helm pull keycloak"
  exit 1
fi
if ! helm pull --repo https://charts.bitnami.com/bitnami --version 10.16.2 --destination charts postgresql; then
  monolog ERROR "Unable to helm pull postgresql"
  exit 1
fi

# First party helm charts
# TODO(PLAT-1417) Add abacus
for x in attributes claims entitlements kas keycloak-bootstrap; do
  i="oci://ghcr.io/opentdf/charts/${x}"
  if ! helm pull --repo "$i" --version "$SERVICE_CHART_TAG"; then
    monolog ERROR "Failed to [helm pull ${i} --version $SERVICE_CHART_TAG]"
    exit 1
  fi
done

# Include an example deployment
if ! rsync -lmr --safe-links --executability --force deployments/local/* build/export/deployment; then
  monolog ERROR "Unable to update deployment"
  exit 1
fi

# if ! sed -i '' "s/:head/:$SERVICE_IMAGE_TAG/" "build/export/deployment/values-all-in-one.yaml"; then
#   monolog ERROR "Unable to change deployment image tags"
#   exit 1
# fi

# # Include scripts for helping with things
# if ! rsync -lmr --safe-links --executability --force scripts/* build/export/scripts; then
#   monolog ERROR "Unable to update scripts folder"
#   exit 1
# fi


# maybe-exit() {
#   local err="$?"
#   if [[ ! $err ]]; then
#     monolog ERROR "$1; err=$err"
#     exit 1
#   fi
# }


# # # DOWNLOAD SOME SDKS
# # TODO: Release client to npm
# # TDF3_LATEST=$(curl -s http://registry.npmjs.org/tdf3-js/latest/ | sed 's/.*"tarball":"\([^"]*\).*/\1/')
# # TDF3_TGZ=$(echo "$TDF3_LATEST" | sed 's/.*-\/\(.*\.tgz\)$/\1/')
# # curl -s "https://registry.npmjs.org/tdf3-js/-/$TDF3_TGZ" --output "build/export/sdk-$TDF3_TGZ"
# # maybe-exit "Failed to get latest of tdf3-js (${TDF3_LATEST}) from NPM, expected at [${TDF3_TGZ}]"

# pip-latest() {
#   local project
#   project="$1"
#   shift

#   local deets
#   deets="$(curl -s "https://pypi.org/pypi/${project}/json")"
#   maybe-exit "Getting details of [${project}] failed with $?"

#   local version
#   version="$(jq -r '.info.version' <<<"${deets}")"
#   maybe-exit "Getting latest version of [${project}] failed"

#   local variants
#   variants=$(jq -r --arg version "$version" '.releases[$version]' <<<"${deets}")
#   maybe-exit "Getting latest version of [${project}] failed"

#   local len
#   len=$(jq -r 'length' <<<"$variants")
#   maybe-exit "Surprising variants object"
#   [[ $len ]]
#   maybe-exit "len=[$len]"
#   monolog INFO "Found $len variants of $project $version"

#   local filename
#   local url
#   for ((i = 0; i < len; i++)); do
#     filename=$(jq -r --argjson i "$i" '.[$i].filename' <<<"${variants}")
#     url=$(jq -r --argjson i "$i" '.[$i].url' <<<"${variants}")
#     [[ $filename && $url ]]
#     maybe-exit "filename=[$filename] url=[$url]"
#     monolog INFO "Downloading $filename from $url"
#     curl -s "${url}" >"build/export/${filename}"
#     maybe-exit "Failed downloading [$url]"
#   done
# }

# pip-latest opentdf

# # BUNDLE THAT STUFF UP
# fname="offline-bundle-${suffix}.zip"
# if ! ( cd build && zip -r "${fname}" export ); then
#   monolog ERROR "Failed to export as zip file"
#   exit 1
# fi

# echo "${suffix}" >build/export/COMPLETED_TAG
# monolog DEBUG "Saved stuff as build/${fname}"
