"""user or non-person entity services.

Supports all the REST actions for the user or non-person entity collection. These functions are
basically glue-ware.  The actual REST API is configured in an OpenAPI file
in this directory called 'swagger.yaml' and auto-generated by Connexion.

Use scripts in the /scripts folder to open and close the OpenAPI editor.
These functions are referenced in the spec with tag 'operationId'.
"""

from flask import current_app

from .status import statusify, NUM_ITEMS_HEADER
from ..errors import NotFound, NotImplementedException
from ..models import Entity
from ..services import ServiceSingleton


@statusify(success=201)
def create(body):
    """Create a new user or non-person entity."""
    current_app.logger.debug("Create entity with body = %s", body)
    entity_service = ServiceSingleton.get_instance().entity_service
    entity_raw = entity_service.create(body)
    entity = Entity.from_raw(entity_raw)
    current_app.logger.debug("Entity created as %s", entity.to_json_raw())
    return entity.to_json_raw()


@statusify
def retrieve(userId=None):
    """Retrieve a single user or non-person entity."""
    current_app.logger.debug(
        "Retrieve user or non-person entity with userId = %s", userId
    )
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.retrieve(userId)
    if not user:
        raise NotFound(f"{userId} was not found.")
    entity = Entity.from_raw(user)
    current_app.logger.debug("User %s retrieved as %s", userId, entity.to_json_raw())
    return entity.to_json_raw()


@statusify
def find(q: str = "", state: str = "active"):
    """Retrieve all users or non-person entities, or all who match query parameter. Handles head also."""
    if q:
        current_app.logger.debug("Retrieve entities by query [%s]", q)
        users = ServiceSingleton.get_instance().entity_service.retrieveAllByQuery(q)
        return users, {NUM_ITEMS_HEADER: len(users)}

    current_app.logger.debug("Retrieve all user or non-person entities")
    entity_service = ServiceSingleton.get_instance().entity_service
    users = entity_service.retrieveAll()
    if not users:
        raise NotFound(f"No entities found matching '{q}'")
    current_app.logger.debug("%s user or non-person entities retrieved", len(users))
    # convert to json raw
    entities = []
    for user in users:
        entities.append(Entity.from_raw(user).to_json_raw())
    return entities, {NUM_ITEMS_HEADER: len(entities)}


@statusify
def update(body):
    """Update a user or npe."""
    current_app.logger.debug("Update user or non-person entity with body = %s", body)
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.update(body)
    entity = Entity.from_raw(user)
    current_app.logger.debug("User updated as %s", entity.to_json_raw())
    return entity.to_json_raw()
