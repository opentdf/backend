"""User services.

Supports all the REST actions for the user collection. These functions are
basically glue-ware.  The actual REST API is configured in an OpenAPI file
in this directory called 'swagger.yaml' and auto-generated by Connexion.

Use scripts in the /scripts folder to open and close the OpenAPI editor.
These functions are referenced in the spec with tag 'operationId'.
"""


from flask import current_app
from .status import statusify, NUM_ITEMS_HEADER
from ..errors import NotFound, NotImplementedException
from ..services import ServiceSingleton


@statusify(success=201)
def create(body):
    """Create a new user."""
    current_app.logger.debug("Create User with body = %s", body)
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.create(body)
    current_app.logger.debug("User created as %s", user)
    return user


@statusify
def retrieve(userId: str):
    """Retrieve a single user."""
    current_app.logger.debug("Retrieve User with userId = %s", userId)
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.retrieve(userId)
    if not user:
        raise NotFound(f"{userId} was not found.")
    current_app.logger.debug("User %s retrieved as %s", userId, user)
    return user


@statusify
def find(q=""):
    """Retrieve all users, or all who match query parameter."""
    if q:
        raise NotImplementedException("Query parameter not implemented")
    current_app.logger.debug("Retrieve all Users")
    entity_service = ServiceSingleton.get_instance().entity_service
    users = entity_service.retrieveAll()
    if not users:
        raise NotFound(f"No entities found matching '{q}'")
    current_app.logger.debug("%s Users retrieved", len(users))
    return users, {NUM_ITEMS_HEADER: len(users)}


@statusify
def update(body):
    """Update an attribute."""
    current_app.logger.debug("Update User with body = %s", body)
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.update(body)
    current_app.logger.debug("User updated as %s", user)
    return user


@statusify
def delete(userId: str):
    """Delete a user's record."""
    current_app.logger.debug("Delete User with userId = %s", userId)
    entity_service = ServiceSingleton.get_instance().entity_service
    user = entity_service.delete(userId)
    if not user:
        raise NotFound(f"{userId} was not found.")
    return user
