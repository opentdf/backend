"""Function to create a WSGI app containing the EAS."""

import logging
import os

import connexion

from .eas_config import EASConfig
from .server_timing import Timing
from .services import ServiceSingleton
from .util.keys.get_keys_from_disk import verify_keys_exist

eas_config = EASConfig.get_instance()

# During startup we require a logger that is independent from the running app
logger = logging.getLogger(__name__)


def eas_app(name):
    """Start the EAS app.

    The app endpoints are autogenerated by Connexion.  The specification
    for the API can be found in the OpenAPI file 'openapi.yaml' in the eas
    directory.  There is a smart editor for working with this file.
    Use 'sh scripts/open_api_editor' to start an editor server on localhost:80
    Browse to 'localhost' to start a session.  The other files in the web
    directory contain the entry-points referenced in the OpenAPI file.
    """
    logger.debug("EAS Application Initializing. [%s as %s]", __name__, name)

    # Check for required keys.  Will throw error if any are missing:
    verify_keys_exist()

    # Allow swagger_ui to be disabled via EASConfig value "SWAGGER_UI"
    options = {}
    if not eas_config.get_item_boolean("SWAGGER_UI"):
        # Turn off Swagger UI feature
        logger.debug("Disable Swagger UI")
        options.update({"swagger_ui": False})
    else:
        logger.warning("Enable Swagger UI")

    # Have connexion open a decorated flask app
    app = connexion.FlaskApp(__name__)

    # Provision it with auth-generated endpoints
    working_dir = os.getcwd()
    open_api_path = os.path.join(working_dir, "openapi.yaml")
    with app.app.app_context():
        ServiceSingleton.get_instance()
        app.add_api(
            open_api_path,
            options=options,
            strict_validation=True,
            validate_responses=True,
        )

    logger.debug("EAS is starting. Setup complete.")
    running_app = app.app

    # Once the app is running, set the Flask App's logger to the appropriate level
    running_app.logger.setLevel(eas_config.get_item("LOGLEVEL"))
    running_app.testing = eas_config.get_item_boolean("FLASK_TESTING")
    # set profiler
    Timing(
        running_app,
        eas_config.get_item("STATSD_HOST"),
        eas_config.get_item("STATSD_PORT"),
        "service.eas.flask",
    )
    running_app.logger.debug("EAS is running.")

    return running_app
