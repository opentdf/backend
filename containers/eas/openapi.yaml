# OpenAPI Spec https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md
openapi: 3.0.3
externalDocs:
  description: Developer Hub
  url: https://developer.virtru.com/
info:
  # independent of eas/VERSION
  version: 0.2.0
  title: Entity Attribute Service
  termsOfService: https://www.virtru.com/terms-of-service/
  contact:
    email: support@virtru.com
  license:
    name: MIT
    url: https://github.com/virtru/etheria/blob/master/LICENSE
paths:
  /:
    get:
      tags:
        - heartbeat
      summary: Return current version as semver
      operationId: src.web.heartbeat.ping
      responses:
        "200":
          $ref: "#/components/responses/Version"
  /healthz:
    get:
      tags:
        - heartbeat
      summary: Return current version as semver; useful for liveness checks
      operationId: src.web.heartbeat.healthz
      parameters:
        - name: probe
          description: liveness or readiness
          in: query
          schema:
            default: liveness
            enum:
              - liveness
              - readiness
            type: string
      responses:
        "200":
          description: Success with a detail message
        "204":
          description: Success with no detail message
        "500":
          description: Unhealthy, per the requested probe
  /v1/attribute:
    post:
      tags:
        - attribute
      deprecated: True
      summary: Create an attribute using an attribute URI. The other values will be set to defaults. see eas/README.md
      operationId: src.web.attribute.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttributeURI'
            examples:
              https:
                value: ["https://eas.local/attr/Classification/value/Unclassified"]
              many:
                value: ["https://eas.local/attr/Kingdom/value/Animalia","https://eas.local/attr/Phylum/value/Chordata","https://eas.local/attr/Class/value/Mammalia","https://eas.local/attr/Order/value/Primates","https://eas.local/attr/Family/value/Hominidae","https://eas.local/attr/Genus/value/Homo","https://eas.local/attr/Species/value/Homo-sapiens"]
      responses:
        "200":
          description: OK
    put:
      tags:
        - attribute
      deprecated: True
      summary: Update the properties of an attribute value.  see eas/README.md
      operationId: src.web.attribute.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
            examples:
              minimum:
                value:
                  attribute: "https://eas.local/attr/Kingdom/value/Animalia"
                  kasUrl: "http://kas.local"
                  pubKey: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Q9axUqaxEfhOO2+0Xw+\nswa5Rb2RV0xeTX3GC9DeORv9Ip49oNy+RXvaMsdNKspPWYZZEswrz2+ftwcQOSU+\nefRCbGIwbSl8QBfKV9nGLlVmpDydcAIajc7YvWjQnDTEpHcJdo9y7/oogG7YcEmq\nS3NtVJXCmbc4DyrZpc2BmZD4y9417fSiNjTTYY3Fc19lQz07hxDQLgMT21N4N0Fz\nmD6EkiEpG5sdpDT/NIuGjFnJEPfqIs6TnPaX2y1OZ2/JzC+mldJFZuEqJZ/6qq/e\nYlp04nWrSnXhPpTuxNZ5J0GcPbpcFgdT8173qmm5m5jAjiFCr735lH7USl15H2fW\nTwIDAQAB\n-----END PUBLIC KEY-----\n"
              maximum:
                value:
                  attribute: "https://eas.local/attr/Phylum/value/Chordata"
                  kasUrl: "http://kas.local"
                  pubKey: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Q9axUqaxEfhOO2+0Xw+\nswa5Rb2RV0xeTX3GC9DeORv9Ip49oNy+RXvaMsdNKspPWYZZEswrz2+ftwcQOSU+\nefRCbGIwbSl8QBfKV9nGLlVmpDydcAIajc7YvWjQnDTEpHcJdo9y7/oogG7YcEmq\nS3NtVJXCmbc4DyrZpc2BmZD4y9417fSiNjTTYY3Fc19lQz07hxDQLgMT21N4N0Fz\nmD6EkiEpG5sdpDT/NIuGjFnJEPfqIs6TnPaX2y1OZ2/JzC+mldJFZuEqJZ/6qq/e\nYlp04nWrSnXhPpTuxNZ5J0GcPbpcFgdT8173qmm5m5jAjiFCr735lH7USl15H2fW\nTwIDAQAB\n-----END PUBLIC KEY-----\n"
                  isDefault: false
                  displayName: "Phylum::Chordata"
      responses:
        "200":
          $ref: "#/components/responses/AttributeArray"
        "400":
          $ref: "#/components/responses/BadRequest"
  /v1/attribute_object:
    post:
      tags:
        - attribute object
      # Note this endpoint breaks the design patterns where post methods create and endpoints use singular words. It is post because the payload can be a long array. I think this is already used by TDF3 SDK.
      summary: Return an array of AttributeObject - signed attribute values (JWT) matching an array of attribute URIs
      operationId: src.web.attribute.retrieve
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AttributeURI'
            examples:
              one:
                value: ["https://eas.local/attr/Kingdom/value/Animalia"]
              many:
                value: ["https://eas.local/attr/Kingdom/value/Animalia","https://eas.local/attr/Phylum/value/Chordata","https://eas.local/attr/Class/value/Mammalia","https://eas.local/attr/Order/value/Primates","https://eas.local/attr/Family/value/Hominidae","https://eas.local/attr/Genus/value/Homo","https://eas.local/attr/Species/value/Homo-sapiens"]
      responses:
        "200":
          $ref: "#/components/responses/AttributeObjectArray"
        "400":
          $ref: "#/components/responses/BadRequest"
  /v1/attr:
    parameters:
      - name: namespace
        in: query
        description: Authority namespace. overrides default
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    head:
      tags:
        - attribute name
      summary: (Header only) Return all attribute name objects. Attribute names are comprised of a classification, a set of possible values, and a rule.
      operationId: src.web.attribute_name.head
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequest"
    get:
      tags:
        - attribute name
      summary: Return all attribute name objects. Attribute names are comprised of a classification, a set of possible values, and a rule.
      operationId: src.web.attribute_name.find
      responses:
        "200":
          $ref: "#/components/responses/AttributeNameObjectArray"
        "400":
          $ref: "#/components/responses/BadRequest"
    post:
      tags:
        - attribute name
      summary: Create attribute name(s), which exists in an authority namespace and is comprised a classification, a set of possible values, and a rule.
      description: 'If attribute name cannot be created (for example if body is malformed), [uri: null] will be returned.'
      operationId: src.web.attribute_name.create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AttributeNameObject"
            example:
              - authorityNamespace: "https://eas.local"
                name: "Kingdom"
                rule: allOf
              - authorityNamespace: "https://eas.local"
                name: "Phylum"
                rule: allOf
      responses:
        "201":
          $ref: "#/components/responses/AttributeNameObjectArray"
        "400":
          $ref: "#/components/responses/BadRequest"
    patch:
      tags:
        - attribute name
      summary: Patch attribute name object(s) - merges the new data into existing objects.
      description: 'If an attribute name is not found or body is malformed, [uri: null] will be returned.'
      operationId: src.web.attribute_name.patch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AttributeNameObject"
            example:
              - authorityNamespace: "https://eas.local"
                name: "Kingdom"
                rule: allOf
              - authorityNamespace: "https://eas.local"
                name: "Phylum"
                rule: allOf
      responses:
        "200":
          $ref: "#/components/responses/AttributeNameObjectArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /v1/attrName:
    post:
      # Note this endpoint breaks the design pattern where post methods create. It's here because KAS needs a robust endpoint for attribute name discovery.
      tags:
        - attribute name
      summary: Return multiple attribute name objects, which exists in an authority namespace and is comprised a classification, a set of possible values, and a rule.
      operationId: src.web.attribute_name.get_many
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: path
            examples:
              none:
                value: []
              one:
                value: [ "https://eas.local/attr/Kingdom" ]
              many:
                value: [ "https://eas.local/attr/Kingdom","https://eas.local/attr/Phylum","https://eas.local/attr/Class","https://eas.local/attr/Order","https://eas.local/attr/Family","https://eas.local/attr/Genus","https://eas.local/attr/Species" ]
      responses:
        "200":
          $ref: "#/components/responses/AttributeNameObjectArray"
        "400":
          $ref: "#/components/responses/BadRequest"
  /v1/attr/{name}:
    parameters:
      - name: name
        in: path
        description: Name of the attribute
        required: true
        schema:
          type: string
          example: "IntellectualProperty"
      - name: namespace
        in: query
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    get:
      tags:
        - attribute name
      summary: Return details for an attribute name, which exists in an authority namespace and is comprised a classification, a set of possible values, and a rule.
      operationId: src.web.attribute_name.get
      responses:
        "200":
          $ref: "#/components/responses/AttributeNameObject"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - attribute name
      summary: Update attribute name object. Idempotent
      operationId: src.web.attribute_name.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeNameObject"
            examples:
              minimum:
                value:
                  authorityNamespace: "https://eas.local"
                  name: "IntellectualProperty"
                  rule: "anyOf"
              maximum:
                value:
                  authorityNamespace: "https://eas.local"
                  name: "IntellectualProperty"
                  rule: "anyOf"
                  order: ["TradeSecret", "Proprietary", "BusinessSensitive", "Open"]
      responses:
        "200":
          $ref: "#/components/responses/AttributeNameObject"
        "400":
          $ref: "#/components/responses/BadRequest"
  /v1/attr/{name}/value:
    parameters:
      - name: name
        in: path
        description: Name of the attribute
        required: true
        schema:
          type: string
          example: "IntellectualProperty"
      - name: namespace
        description: Authority namespace. overrides default
        in: query
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    get:
      tags:
        - attribute value
        - attribute name
      summary: Return the possible attribute values for an attribute name.
      operationId: src.web.attribute.get_values
      responses:
        "200":
          $ref: "#/components/responses/AttributeValue"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    post:
      tags:
        - attribute value
        - attribute name
      summary: Create an attribute value for an attribute name.
      operationId: src.web.attribute.create_value
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "201":
          $ref: "#/components/responses/Attribute"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /v1/attr/{name}/value/{value}:
    parameters:
      - name: name
        in: path
        description: Name of the attribute
        required: true
        schema:
          type: string
          example: "IntellectualProperty"
      - name: value
        in: path
        description: Value of the attribute. This is the last part of the attribute uri.
        required: true
        schema:
          type: string
          example: "TradeSecret"
      - name: namespace
        description: Authority namespace. overrides default
        in: query
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    get:
      tags:
        - attribute value
      summary: Return one attribute value.
      operationId: src.web.attribute.get_value
      responses:
        "200":
          $ref: "#/components/responses/Attribute"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - attribute value
      summary: Update one attribute value.
      operationId: src.web.attribute.put
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Attribute"
      responses:
        "200":
          $ref: "#/components/responses/Attribute"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /v1/attr/{name}/entity:
    parameters:
      - name: name
        in: path
        description: Name of the attribute
        required: true
        schema:
          type: string
          example: "IntellectualProperty"
      - name: namespace
        description: Authority namespace. overrides default
        in: query
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    get:
      tags:
        - attribute value
        - entity-attribute
      summary: Return all entities that are actively linked to this attribute name (any value).
      operationId: src.web.entity_attribute.get_entities_for_attribute_name
      responses:
        "200":
          $ref: "#/components/responses/EntityAttributeExpandedArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /v1/attr/{name}/value/{value}/entity:
    parameters:
      - name: name
        in: path
        description: Name of the attribute
        required: true
        schema:
          type: string
          example: "IntellectualProperty"
      - name: value
        in: path
        description: Value of the attribute. This is the last part of the attribute uri.
        required: true
        schema:
          type: string
          example: "TradeSecret"
      - name: namespace
        description: Authority namespace. overrides default
        in: query
        schema:
          $ref: "#/components/schemas/AuthorityNamespace"
    get:
      tags:
        - attribute value
        - entity-attribute
      summary: Return all entities that are actively linked to this attribute name and value.
      operationId: src.web.entity_attribute.get_entities_for_attribute
      responses:
        "200":
          $ref: "#/components/responses/EntityArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  /v1/entity:
    get:
      tags:
        - entity
      summary: Return all users and non-person entities
               Also handles head requests, returning the same headers but no response body.
      operationId: src.web.entity.find
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Query string for substring matching against entity name, identifier, and email (optional)
      responses:
        "200":
          $ref: "#/components/responses/EntityArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - entity
      summary: Create a new user or non-person entity
      operationId: src.web.entity.create
      requestBody:
        description: User or non-person entity object to be added to the user store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
            examples:
              minimum:
                value:
                  userId: "daisy_0987"
              npe:
                value:
                  userId: "8675309"
                  nonPersonEntity: true
              person:
                value:
                  userId: "elaine_4321"
                  aliases: ["laney"]
                  email: "elaine@eas.local"
                  nonPersonEntity: false
                  attributes: ["https://eas.local/attr/Kingdom/value/Animalia"]
      responses:
        "201":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/AlreadyExists"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      tags:
        - entity
      summary: Update an existing user or non-person entity. To disable a user, set `state` to `inactive`.
      operationId: src.web.entity.update
      requestBody:
        description: User or non-person entity to be updated to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
            examples:
              minimum:
                value:
                  userId: "daisy_0987"
              npe:
                value:
                  userId: "5672309"
                  nonPersonEntity: true
              person:
                value:
                  userId: "elaine_4321"
                  aliases: [ "laney" ]
                  email: "elaine@eas.local"
                  nonPersonEntity: false
                  attributes: [ "https://eas.local/attr/Kingdom/value/Animalia","https://eas.local/attr/Phylum/value/Chordata" ]
      responses:
        "200":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/entity/{userId}:
    parameters:
      - name: userId
        in: path
        description: Identifier of the entity to get
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      tags:
        - entity
      summary: Retrieve a single user or non-person entity by identifier
      operationId: src.web.entity.retrieve
      responses:
        "200":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/entity/attribute:
    get:
      tags:
        - entity-attribute
      summary: Return all entity-attribute relationships
      operationId: src.web.entity_attribute.get_entity_attribute
      responses:
        200:
          $ref: "#/components/responses/EntityAttributeRelationshipArray"
  /v1/entity/{entityId}/attribute:
    parameters:
      - name: entityId
        in: path
        description: entity identifier
        required: true
        schema:
          type: string
          format: path
    put:
      tags:
        - entity-attribute
      operationId: src.web.entity_attribute.add_attribute_to_entity_via_entity
      summary: Add attributes (one, many) to this entity
      requestBody:
        $ref: "#/components/requestBodies/AttributeURIArray"
      responses:
        200:
          $ref: "#/components/responses/Entity"
  /v1/entity/{entityId}/attribute/{attributeURI}:
    parameters:
      - name: entityId
        in: path
        description: entity identifier
        required: true
        schema:
          type: string
          format: path
      - name: attributeURI
        in: path
        description: attribute URI
        required: true
        schema:
          type: string
          format: path
    delete:
      tags:
        - entity-attribute
      operationId: src.web.entity_attribute.delete_attribute_from_entity
      summary: Remove this attribute from this entity
      responses:
        200:
          description: done, no content
        404:
          description: not found
  /v1/attribute/{attributeURI}/entity:
    parameters:
      - name: attributeURI
        in: path
        description: attribute URI
        required: true
        schema:
          type: string
          format: path
    put:
      tags:
        - entity-attribute
      operationId: src.web.entity_attribute.add_attribute_to_entity_via_attribute
      summary: Add this attribute to entities (one, many)
      requestBody:
        $ref: "#/components/requestBodies/EntityIdArray"
      responses:
        200:
          $ref: "#/components/responses/EntityIdArray"
  /v1/entity_object:
    post:
      # Note this endpoint breaks the design patterns where post methods create
      # and endpoints use camelcase. It is post because a large key is in the
      # payload, and keeps the name because it is already used by TDF3 SDK.
      tags:
        - entity object
      summary: Return entity object for a user
      operationId: src.web.entity_object.generate
      requestBody:
        $ref: "#/components/requestBodies/EntityObject"
      responses:
        "200":
          $ref: "#/components/responses/EntityObject"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/authorityNamespace:
    get:
      tags:
        - authority namespace
      summary: Return the authority namespaces supported by this EAS.
      operationId: src.web.authority_namespace.get
      parameters:
        - name: isDefault
          description: true to get the default namespace
          in: query
          schema:
            type: boolean
      responses:
        "200":
          $ref: "#/components/responses/AuthorityNamespaceArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - authority namespace
      summary: Create authority namespace
      operationId: src.web.authority_namespace.create
      requestBody:
        description: Authority namespace added and default state
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorityNamespaceObject"
      responses:
        "201":
          $ref: "#/components/responses/AuthorityNamespace"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/user:
    get:
      deprecated: true
      tags:
        - user (deprecated - use entity)
      summary: Return all users and non-person entities, or all that match an optional query string  see eas/README.md
      operationId: src.web.user.find
      parameters:
        - name: q
          in: query
          schema:
            type: string
          description: Query string for substring matching against userId (optional)
      responses:
        "200":
          $ref: "#/components/responses/EntityArray"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      deprecated: true
      tags:
        - user (deprecated - use entity)
      summary: Create a new user or non-person entity  see eas/README.md
      operationId: src.web.user.create
      requestBody:
        description: User object to be added to the user store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        "201":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/AlreadyExists"
        "500":
          $ref: "#/components/responses/ServerError"
    put:
      deprecated: true
      tags:
        - user (deprecated - use entity)
      summary: Update an existing user or non-person entity (Idempotent)  see eas/README.md
      operationId: src.web.user.update
      requestBody:
        description: User or non-person entity to be updated to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entity"
      responses:
        "200":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /v1/user/{userId}:
    parameters:
      - name: userId
        in: path
        description: Unique userId of the user or non-person entity
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
    get:
      deprecated: true
      tags:
        - user (deprecated - use entity)
      summary: Retrieve a single user or non-person entity by identifier.  see eas/README.md
      operationId: src.web.user.retrieve
      responses:
        "200":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    delete:
      deprecated: true
      tags:
        - user (deprecated - use entity)
      summary: Deactivate a user or non-person entity by id.  see eas/README.md
      operationId: src.web.user.delete
      responses:
        "200":
          $ref: "#/components/responses/Entity"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
components:
  responses:
    Attribute:
      description: Respond with the attribute and its properties
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Attribute"
    AttributeArray:
      description: Respond with the attributes and its properties
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Attribute"
    AttributeNameObject:
      description: Respond with the attribute name
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AttributeNameObject"
    AttributeNameObjectArray:
      description: Respond with an array of attribute names
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeNameObject"
    AttributeObjectArray:
      description: Respond with an array of attribute objects (JWT)
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeObject"
    AuthorityNamespaceArray:
      description: Respond with the authority namespace supported by this EAS.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuthorityNamespace"
    Entity:
      description: Respond with user or non-person entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Entity"
    EntityObject:
      description: Respond with an entity object representing a user or non-person entity. An entity object is used to ensure that individuals (entities) attempting to decrypt an encrypted file under the Trusted Data Format has all permissions required to do so.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EntityObject"
    EntityArray:
      description: Respond with multiple users and/or non-person entities
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Entity"
    Version:
      description: Respond with current version
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Version"
    EntityAttributeRelationshipArray:
      description: Respond with an array of Entity Attribute Relationships
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EntityAttributeRelationship'
    EntityAttributeExpandedArray:
      description: Respond with an array of Entity Attribute Relationships, expanded with full entity and attribute objects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EntityAttributeRelationshipExpanded"
    EntityIdArray:
      description: Entity identifier array
      content:
        application/json:
          schema:
            type: array
            items:
               $ref: "#/components/schemas/EntityId"
    AttributeValue:
      description: value of an attribute
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Attribute'
    # Errors
    BadRequest:
      description: 400 Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    ServerError:
      description: 500 Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotFound:
      description: 404 Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    AlreadyExists:
      description: The user already exists in the database.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    AuthorityNamespace:
      description: authority namespace
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorityNamespaceObject"
  requestBodies:
    EntityObject:
      description: An entity object request body
      content:
        application/json:
          schema:
            required:
              - publicKey
            properties:
              userId:
                $ref: "#/components/schemas/EntityId"
              publicKey:
                $ref: "#/components/schemas/PublicKey"
              algorithm:
                description: String to define the type of algorithm the client performing the TDF operations.
                type: string
                example: "ec:secp256r1"
    AttributeURIArray:
      description: Attribute URI array
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AttributeURI"
    EntityIdArray:
      description: Entity identifier array
      content:
        application/json:
          schema:
            type: array
            items:
               $ref: "#/components/schemas/EntityId"
  schemas:
    Attribute:
      type: object
      required:
        - attribute
        - kasUrl
        - pubKey
      properties:
        attribute:
          $ref: "#/components/schemas/AttributeURI"
        displayName:
          type: string
          example: "Top Secret"
        pubKey:
          $ref: "#/components/schemas/PublicKey"
        kasUrl:
          description: Base URL of a KAS that can make access control decisions for this attribute.
          type: string
          format: path
          example: "http://kas.local"
        isDefault:
          description: If true this flag identifies the attribute as the default attribute. If missing (preferred) or false then the attribute is not the default attribute. (Optional)
          type: boolean
          example: false
        schemaVersion:
          description: Version number of the TDF3 Attribute Object schema (optional).
          type: string
          example: "1.1.0"
        state:
          type: string
          enum: [active, inactive]
    AttributeURI:
      description: The unique and immutable resource name for the attribute represented as a case-sensitive URI of the format https://[auth namespace]/attr/[attr name]/value/[attr value]
      type: string
      format: path
      example: "https://eas.local/attr/ClassificationUS/value/Unclassified"
    AttributeObject:
      description: An Attribute Object contains a jwt with attribute information the TDF3 system uses to enforce access control.
      type: object
      properties:
        jwt:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    AttributeNameObject:
      description: An authority namespace, name and rule.
      type: object
      required:
        - authorityNamespace
        - name
        - rule
      properties:
        authorityNamespace:
          type: string
          example: "https://eas.local"
        name:
          description: Name of the attribute, e.g. 'color' in 'https://eas.local/attr/color/value/green'
          type: string
          example: "IntellectualProperty"
        rule:
          type: string
          enum: [anyOf, allOf, hierarchy]
        order:
          type: array
          items:
            type: string
          example: ["TradeSecret", "Proprietary", "BusinessSensitive", "Open"]
        state:
          type: string
          enum: [active, inactive]
    AuthorityNamespace:
      description: A canonical domain responsible for managing attribute names (and thus their attribute values)
      type: string
      format: path
      example: "https://eas.local"
    AuthorityNamespaceObject:
      description: s
      type: object
      properties:
        namespace:
          $ref: "#/components/schemas/AuthorityNamespace"
        isDefault:
          type: boolean
    Entity:
      description: An entity is a basic representation of a user or a non-person entity (NPE).
      type: object
      required:
        - userId
      properties:
        userId:
          $ref: "#/components/schemas/EntityId"
        aliases:
          type: array
          items:
            type: string
        name:
          type: string
          example: "Charlie"
        email:
          type: string
          example: "charlie@eas.local"
        nonPersonEntity:
          type: boolean
          example: false
        state:
          $ref: "#/components/schemas/EntityState"
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeURI"
        publicKey:
          $ref: "#/components/schemas/PublicKey"
    EntityId:
      description: Unique string for the entity, such as distinguished name, email, or login id.  aka userId
      type: string
      example: "Charlie_1234"
    EntityState:
      type: string
      enum: [active, inactive]
    EntityObject:
      description: The Entity Object is a JSON object used to ensure that individuals (entities) attempting to decrypt an encrypted file under the Trusted Data Format has all permissions required to do so.
      type: object
      required:
        - userId
      properties:
        userId:
          $ref: "#/components/schemas/EntityId"
        aliases:
          type: array
          items:
            type: string
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/AttributeObject"
        publicKey:
          $ref: "#/components/schemas/PublicKey"
        cert:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        exp:
          type: number
          example: 1611387008.338341
        schemaVersion:
          type: string
          example: 1.1.0
    Problem:
      description: Standard problem details message used for errors. From https://tools.ietf.org/html/draft-ietf-appsawg-http-problem-00 .
      type: object
      properties:
        title:
          type: string
          description: Human-readable summary of problem
          example: "Exception name"
        detail:
          type: string
          description: An human readable explanation specific to this
            occurrence of the problem.
          example: "An human readable explanation specific to this occurrence of the problem."
        status:
          type: integer
          default: 500
          example: 000
        type:
          type: string
          description: Link to web page with further information on the problem, if available.
          example: "https://eas.example.com/problem_information"
          default: about:blank
    PublicKey:
      type: string
      example: "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2Q9axUqaxEfhOO2+0Xw+\nswa5Rb2RV0xeTX3GC9DeORv9Ip49oNy+RXvaMsdNKspPWYZZEswrz2+ftwcQOSU+\nefRCbGIwbSl8QBfKV9nGLlVmpDydcAIajc7YvWjQnDTEpHcJdo9y7/oogG7YcEmq\nS3NtVJXCmbc4DyrZpc2BmZD4y9417fSiNjTTYY3Fc19lQz07hxDQLgMT21N4N0Fz\nmD6EkiEpG5sdpDT/NIuGjFnJEPfqIs6TnPaX2y1OZ2/JzC+mldJFZuEqJZ/6qq/e\nYlp04nWrSnXhPpTuxNZ5J0GcPbpcFgdT8173qmm5m5jAjiFCr735lH7USl15H2fW\nTwIDAQAB\n-----END PUBLIC KEY-----\n"
    Version:
      description: non-versioned endpoint to display server version
      type: object
      properties:
        version:
          type: string
          example: "0.0.0"
    EntityAttributeRelationshipState:
      type: string
      enum: [active, inactive]
    EntityAttributeRelationshipExpanded:
      description: The entity and attribute association using the complete objects including the state.
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Entity"
        attribute:
          $ref: "#/components/schemas/Attribute"
        state:
          $ref: "#/components/schemas/EntityAttributeRelationshipState"
    EntityAttributeRelationship:
      description: The entity and attribute association using the identifiers of both. Also includes the state of that association.
      type: object
      properties:
        entityId:
          $ref: '#/components/schemas/EntityId'
        attribute:
          $ref: '#/components/schemas/AttributeURI'
        state:
          $ref: "#/components/schemas/EntityAttributeRelationshipState"
