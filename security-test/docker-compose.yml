version: "3.8"
networks:
  internal-network:
    internal: true
services:
  eas:
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ../containers/service_entity_object
    depends_on:
      - migration
    environment:
      - EAS_PRIVATE_KEY
      - EAS_ENTITY_EXPIRATION=99
      - KAS_DEFAULT_URL=http://kas:8000
      - KAS_EC_SECP256R1_CERTIFICATE
      - KAS_CERTIFICATE
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tdf_entitlement_reader
      - POSTGRES_PASSWORD=myPostgresPassword
      - POSTGRES_DATABASE=tdf_database
      - POSTGRES_SCHEMA=tdf_entitlement
    expose:
      - 4010
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: "wget -O /dev/null -T 1 localhost:4010/healthz?probe=liveness"
      interval: "60s"
      timeout: "2s"
      start_period: "5s"
      retries: 1
  attribute-authority:
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ../containers/service_attribute_authority
    depends_on:
      - migration
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tdf_attribute_manager
      - POSTGRES_PASSWORD=myPostgresPassword
      - POSTGRES_DATABASE=tdf_database
      - POSTGRES_SCHEMA=tdf_attribute
    expose:
      - 4020
    ports:
      - 4020:4020
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: "wget -O /dev/null -T 1 localhost:4020/healthz?probe=liveness"
      interval: "60s"
      timeout: "2s"
      start_period: "5s"
      retries: 1
  entitlement:
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ../containers/service_entitlement
    depends_on:
      - migration
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tdf_entitlement_manager
      - POSTGRES_PASSWORD=myPostgresPassword
      - POSTGRES_DATABASE=tdf_database
      - POSTGRES_SCHEMA=tdf_entitlement
    expose:
      - 4030
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: "wget -O /dev/null -T 1 localhost:4030/healthz?probe=liveness"
      interval: "60s"
      timeout: "2s"
      start_period: "5s"
      retries: 1
  entity:
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ../containers/service_entity
    depends_on:
      - migration
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=tdf_entity_manager
      - POSTGRES_PASSWORD=myPostgresPassword
      - POSTGRES_DATABASE=tdf_database
      - POSTGRES_SCHEMA=tdf_entity
    expose:
      - 4040
    networks:
      - internal-network
    restart: always
    healthcheck:
      test: "wget -O /dev/null -T 1 localhost:4040/healthz?probe=liveness"
      interval: "60s"
      timeout: "2s"
      start_period: "5s"
      retries: 1
  kas:
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ../containers/kas
      dockerfile: Dockerfile
    environment:
      - EAS_CERTIFICATE
      - FLASK_DEBUG=True
      - KAS_EC_SECP256R1_PRIVATE_KEY
      - KAS_EC_SECP256R1_CERTIFICATE
      - KAS_PRIVATE_KEY
      - KAS_CERTIFICATE
      - PYTHONDEVMODE=1
      - MONOLOG_LEVEL
    expose:
      - 8000
    networks:
      - internal-network
    volumes:
      - ../tools:/tools
  # https://www.zaproxy.org/docs/docker/api-scan/
  eas-api-scan:
    command: zap-api-scan.py -d -S -f openapi -t http://eas:4010/openapi.json -O eas:4010/
    depends_on:
      - eas
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  kas-api-scan:
    command: zap-api-scan.py -I -s -d -S -f openapi -t http://kas:8000/openapi.json -O kas:8000/
    depends_on:
      - kas
    environment:
      - PYTHONUNBUFFERED=1
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  eas-active-scan:
    command: zap-api-scan.py -d -f openapi -t http://eas:4010/openapi.json -O eas:4010/
    depends_on:
      - eas
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  attribute-authority-active-scan:
    command: zap-api-scan.py -d -f openapi -t http://attribute-authority:4020/openapi.json -O attribute-authority:4020/
    depends_on:
      - attribute-authority
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  entitlement-active-scan:
    command: zap-api-scan.py -d -f openapi -t http://entitlement:4030/openapi.json -O entitlement:4030/
    depends_on:
      - entitlement
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  entity-active-scan:
    command: zap-api-scan.py -d -f openapi -t http://entity:4040/openapi.json -O entity:4040/
    depends_on:
      - entity
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  kas-active-scan:
    command: zap-api-scan.py -d -f openapi -t http://kas:8000/openapi.json -O kas:8000/
    depends_on:
      - kas
    image: owasp/zap2docker-stable
    networks:
      - internal-network
      - default
  postgres:
    image: postgres:12
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=master_user
      - POSTGRES_PASSWORD=master_password
      - POSTGRES_DB=tdf_database
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - internal-network
  migration:
    build:
      args:
        - PY_OSS_VERSION=${PY_OSS_VERSION:-==1.1.1}
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ..
      dockerfile: containers/migration/Dockerfile
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=master_user
      - POSTGRES_PASSWORD=master_password
      - POSTGRES_DATABASE=tdf_database
    depends_on:
      - postgres
    networks:
      - internal-network
