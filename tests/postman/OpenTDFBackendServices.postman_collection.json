{
	"info": {
		"_postman_id": "51502128-baa8-4d37-b0bd-8c0ae5b0340f",
		"name": "OpenTDFBackendServices",
		"description": "Postman collection for testing OpenTDF backend services.\n\nAll services should be up and running before running the test.\n\nEntitlement PDP service should be port-forwarded to 3355 using \"kubectl port-forward service/entitlement-pdp 3355\" to be accessible from outside of the cluster.\n\nEntity Resolution service should be port-forwarded to 7070 using \"kubectl port-forward service/entity-resolution 7070\" to be accessible from outside of the cluster.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3237256"
	},
	"item": [
		{
			"name": "Attributes",
			"item": [
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.json()",
									"var token = resp.access_token",
									"pm.collectionVariables.set(\"access_token_api\", token);",
									"",
									"pm.test(\"Access token is received, 200 coded is returned\", function () {",
									"    pm.expect(token).to.not.equal(null)",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "tdf-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:65432/auth/realms/tdf/protocol/openid-connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "65432",
							"path": [
								"auth",
								"realms",
								"tdf",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"authority\": \"{{authority_name_api}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/authorities",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Authorities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"authority\": \"{{authority_name_api}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/authorities",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"authorities"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"authority\": \"{{authority_name_api}}\",\n            \"name\": \"{{attribute_name_api}}\",\n            \"rule\": \"hierarchy\",\n            \"state\": \"published\",\n            \"order\": [\n                \"TradeSecret\"\n            ]\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/definitions/attributes",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"definitions",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"authority\": \"{{authority_name_api}}\",\n            \"name\": \"{{attribute_name_api}}\",\n            \"rule\": \"anyOf\",\n            \"state\": \"published\",\n            \"order\": [\n                \"Proprietary\",\n                \"BusinessSensitive\"\n            ]\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/definitions/attributes",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"definitions",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/definitions/attributes?authority={{authority_name_api}}&name={{attribute_name_api}}",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"definitions",
								"attributes"
							],
							"query": [
								{
									"key": "authority",
									"value": "{{authority_name_api}}"
								},
								{
									"key": "name",
									"value": "{{attribute_name_api}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n            \"authority\": \"{{authority_name_api}}\",\n            \"name\": \"{{attribute_name_api}}\",\n            \"rule\": \"anyOf\",\n            \"state\": \"published\",\n            \"order\": [\n                \"Proprietary\",\n                \"BusinessSensitive\"\n            ]\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/definitions/attributes",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"definitions",
								"attributes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authority",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"authority\":\"{{authority_name_api}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/attributes/authorities",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"attributes",
								"authorities"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entitlements",
			"item": [
				{
					"name": "Get Entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resp = pm.response.json()",
									"var existed_entity_ids = Object.keys(resp[0])",
									"pm.collectionVariables.set(\"existed_entity_id\", existed_entity_ids[0])",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_api}}/entitlements/entitlements",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"entitlements",
								"entitlements"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"https://opentdf.io/attr/IntellectualProperty/value/TradeSecret\",\n  \"https://opentdf.io/attr/ClassificationUS/value/Unclassified\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/entitlements/entitlements/{{existed_entity_id}}",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"entitlements",
								"entitlements",
								"{{existed_entity_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"https://opentdf.io/attr/IntellectualProperty/value/TradeSecret\"\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/entitlements/entitlements/{{existed_entity_id}}",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"entitlements",
								"entitlements",
								"{{existed_entity_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "KAS_App",
			"item": [
				{
					"name": "Healthz (204)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_api}}/kas/healthz",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"kas",
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Version (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_api}}/kas/",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"kas",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get KAS Public Key (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url_api}}/kas/kas_public_key",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"kas",
								"kas_public_key"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EntitlementPDP",
			"item": [
				{
					"name": "healthz-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3355/healthz",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3355",
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "entitlements-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"primary_entity_id\": \"508d5145-c16b-4bc7-9b32-a79cbbb17532\",\n    \"secondary_entity_ids\": [\n        \"\"\n    ],\n    \"entitlement_context_obj\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3355/entitlements",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3355",
							"path": [
								"entitlements"
							]
						}
					},
					"response": []
				}
			],
			"description": "Service should be port-forwarded to 3355 using \"kubectl port-forward service/entitlement-pdp 3355\" to be accessible from outside of the cluster",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EntityResolution",
			"item": [
				{
					"name": "healthz-200",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:7070/healthz",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7070",
							"path": [
								"healthz"
							]
						}
					},
					"response": []
				},
				{
					"name": "resolve-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Check presence of matching entity's id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].EntityRepresentations[0]).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"entity_identifiers\": [{\"identifier\": \"alice_1234\", \"type\": \"username\"}]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7070/resolve",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7070",
							"path": [
								"resolve"
							]
						}
					},
					"response": []
				}
			],
			"description": "Service should be port-forwarded to 7070 using \"kubectl port-forward service/entity-resolution 7070\" to be accessible from outside of the cluster\n\n###",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "EntitlementStore",
			"item": [
				{
					"name": "entitle-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check presence of matching attributes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].entity_attributes[0]).to.have.property('attribute');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"primary_entity_id\": \"{{existed_entity_id}}\",\n    \"secondary_entity_ids\": [\n        \"46a871f2-6d2a-4d27-b727-e619cfaf4e7b\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url_api}}/entitlement-store/entitle",
							"host": [
								"{{base_url_api}}"
							],
							"path": [
								"entitlement-store",
								"entitle"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token_api}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url_api",
			"value": "http://localhost:65432/api",
			"type": "string"
		},
		{
			"key": "access_token_api",
			"value": "",
			"type": "string"
		},
		{
			"key": "authority_name_api",
			"value": "https://authorityforapitest.com",
			"type": "string"
		},
		{
			"key": "attribute_name_api",
			"value": "attributeNameForAPITest",
			"type": "string"
		},
		{
			"key": "existed_entity_id",
			"value": "",
			"type": "string"
		}
	]
}