# TODO DEPRECATED - this should be dropped in favor of a Helm-based install and KUTTL test
version: "3.8"
volumes:
  key-store:
services:
  genkeys:
    entrypoint: /tools/wait-after /tools/genkeys-if-needed
    environment:
      - MONOLOG_LEVEL
      - EAS_UID=908
      - KAS_UID=909
      - CLIENT_UID=1909
    image: virtru/tdf-python-base:${PY_VERSION:-3.9}
    logging:
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - key-store:/certs/
    working_dir: /tools
  eas:
    depends_on:
      - genkeys
      - postgres
    environment:
      - EAS_ATTRIBUTES_JSON
      - EAS_DB_PATH=/eas_app/db/data/eas_database.sqlite
      - EAS_UID=908
      - EAS_USERS_JSON
      - FLASK_DEBUG=True
      - GUNICORN_PORT=4010
      - GUNICORN_WORKERS=1
      - JSON_LOGGER=False
      - KAS_DEFAULT_URL=https://etheria.local:4443/kas
      - LOGLEVEL=DEBUG
      - MONOLOG_LEVEL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=eas_user
      - POSTGRES_PASSWORD=eas_password
      - POSTGRES_DB=eas_db
    expose:
      - 4010
    build:
      args:
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ./containers/eas
      dockerfile: Dockerfile
    logging:
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - key-store:/certs/
  kas:
    build:
      args:
        - ALPINE_VERSION=${ALPINE_VERSION:-3.13}
        - LEGACY_NANOTDF_IV=1
        - PY_VERSION=${PY_VERSION:-3.9}
      context: ./containers/kas
      dockerfile: Dockerfile
    depends_on:
      - genkeys
    entrypoint: ["/kas_app/scripts/entrypoint"]
    environment:
      - EAS_HOST=https://etheria.local/eas/
      - FLASK_DEBUG=True
      - GUNICORN_WORKERS=1
      - JSON_LOGGER=False
      - CA_CERT_PATH=/certs/ca.crt
      - LOGLEVEL=DEBUG
      - MONOLOG_LEVEL
      - KAS_UID=909
    expose:
      - 8000
    logging:
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - key-store:/certs/
  etheria.local:
    depends_on:
      - eas
      - kas
    entrypoint:
      [
        "/tools/wait-for-file",

        "--ln",
        "/certs/ca.crt",
        "/etc/nginx/ca-crt.pem",

        "--ln",
        "/certs/reverse-proxy.crt",
        "/etc/nginx/server-crt.pem",

        "--ln",
        "/certs/reverse-proxy.key",
        "/etc/nginx/server-key.pem",

        "--",

        "/entrypoint.sh",
      ]
    environment:
      - EAS_URL=http://eas:4010
      - KAS_URL=http://kas:8000
      - NGINX_HOST=etheria.local
      - MONOLOG_LEVEL
    expose:
      - 443
      - 4443
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k https://etheria.local/eas/ && curl -k https://etheria.local/kas/",
        ]
      interval: 10s
      start_period: 10s
      timeout: 5s
    hostname: etheria.local
    image: nginx
    logging:
      options:
        max-file: "5"
        max-size: "10m"
    volumes:
      - ./reverse-proxy/entrypoint.sh:/entrypoint.sh:cached
      - ./reverse-proxy/logs:/var/log/nginx:cached
      - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.template:cached
      - ./containers/python_base/tools:/tools:cached
      - key-store:/certs/
  xtest-py-oss:
    build:
      args:
        - NODE_VERSION=${NODE_VERSION:-lts-buster}
        - PY_OSS_VERSION=${PY_OSS_VERSION:-==1.1.1}
      context: .
      dockerfile: xtest/Dockerfile
    depends_on:
      - etheria.local
    environment:
      - CLIENT_UID=1909
      - JAVA_BUILD_ARTIFACT
      - MONOLOG_LEVEL
    command: >-
      bash -c "/xtest/scripts/wait-and-test /xtest/config-oss.json
      --crud --owner Alice_1234 --stage compose
      --sdks sdk/js/node/cli.sh sdk/py/oss/cli.sh sdk/java/oss/cli.sh
      && /xtest/scripts/wait-and-test /xtest/config-oss.json
      --owner Alice_1234 --stage compose
      --sdks sdk/py/nanotdf/cli.sh"
    logging:
      options:
        max-file: "5"
        max-size: "10m"
  postgres:
    expose:
      - 5432
    image: postgres:12
    environment:
      - POSTGRES_USER=eas_user
      - POSTGRES_PASSWORD=eas_password
      - POSTGRES_DB=eas_db
