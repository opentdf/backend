name: Release Backend

# GITHUB_SHA/REF will be set to the SHA/REF of the last commit in the tagged release
on:
  release:
    types: [published]

# This workflow is designed to be triggered only when someone publishes a Github release against a specific, preexisting Git tag in `main`
# This workflow presumes that the normal `main` merge CI has already run for the particular merge SHA the release tag is bound to, as it should for every change to `main`
# This workflow assumes the release tag is the literal Semver you want to use to stamp the release charts with.
# This workflow will bake images into the (human-readable SEMVER from tag) charts using (generated from current tag SHA) tagged image builds, which presumably have already been built+pushed for this SHA
jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        repo:
          - python-base
          - entitlement_store
          - attributes
          - entitlements
          - kas
          - keycloak-bootstrap
          - entitlement-pdp
          - entity-resolution
          - claims
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag existing images
        run: >-
          docker buildx imagetools create 
              ghcr.io/opentdf/${{ matrix.repo }}:sha-$(git rev-parse --short HEAD)
              --tag ghcr.io/opentdf/${{ matrix.repo }}:${{ event.release.release.tag }}

  policybundle:
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BUNDLETAG: ghcr.io/opentdf/entitlement-pdp/entitlements-policybundle
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: Setup OPA for running policy tests
        uses: open-policy-agent/setup-opa@v1
        with:
          version: latest
      - name: Setup policy OCI bundler tool
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"
      - name: Build policy bundle
        run: |
          go install github.com/opcr-io/policy/cmd/policy@latest
          cd containers/entitlement-pdp/entitlement-policy
          policy login --server=ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}
          policy tag ghcr.io/opentdf/entitlement-pdp/entitlements-policybundle:sha-$(git rev-parse --short HEAD) \
              "${{ event.release.release.tag }}"

  publish-helm-charts-release:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs:
      - docker
      - policybundle
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: yokawasa/action-setup-kube-tools@v0.8.0
        with:
          setup-tools: helm
          helm: "3.9.1"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: push
        run: |
          scripts/update-charts release
          cd charts || exit 1
          for d in */ ; do
              if [ -f "$d/Chart.yaml" -a "$d" != "backend/" ]; then
                echo "Packaging Helm chart $d..."
                helm package $d
                echo "Packaged as" *.tgz
                helm push *.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
                rm *.tgz
              fi
          done
          echo "Waiting a bit for subcharts to propagate"
          sleep 10
          echo "Updating backend chart versions"
          helm dependency update backend
          helm package backend
          echo "Packaged Helm chart [backend] as " *.tgz
          helm push *.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
          rm *.tgz
