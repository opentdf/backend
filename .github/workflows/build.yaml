name: Build Backend
env:
  CONTAINER_ARCHS: linux/amd64,linux/arm64

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      KEYCLOAK_BASE_VERSION: ${{ steps.keycloak-base-version.outputs.KEYCLOAK_BASE_VERSION }}
      KEYCLOAK_OTDF_VERSION: ${{ steps.keycloak-otdf-version.outputs.KEYCLOAK_OTDF_VERSION }}
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - name: Select keycloak base version
        run: | 
          KEYCLOAK_BASE_VERSION="$(cut -d- -f1 <containers/keycloak-protocol-mapper/VERSION)"
          echo "::set-output name=KEYCLOAK_BASE_VERSION::$KEYCLOAK_BASE_VERSION"
        id: keycloak-base-version
      - name: Set output modified image version
        run: |
          KEYCLOAK_OTDF_VERSION="$(cut -d- -f1 <containers/keycloak-protocol-mapper/VERSION)"
          echo "::set-output name=KEYCLOAK_OTDF_VERSION::$KEYCLOAK_OTDF_VERSION"
        id: keycloak-otdf-version

  lint:
    runs-on: ubuntu-latest
    container:
      image: quay.io/helmpack/chart-testing:latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: >-
          git version && ( git remote -v | grep backend.git ) || (
            git config --global --add safe.directory /__w/backend/backend ||
              git remote add origin https://github.com/opentdf/backend.git ||
              git remote set-url origin https://github.com/opentdf/backend.git
          ) || echo not configurable
      - name: Lint
        run: ct lint --target-branch main --all charts/
      - name: Render Templates
        run: |
          cd charts
          for d in * ; do
            if [ -f "$d/Chart.yaml" ]; then
              echo "Rendering Helm chart $d to validate defaults..."
              helm template "$d"
            fi
          done

  scriptcheck:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: 🦪 ✔ 🧼🧼🧼
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "koalaman/shellcheck:v0.8.0" --color=always scripts/*
      - name: 🦪 ✅ 🦇🦇🦇
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" bats/bats:1.5.0 scripts/*.bats

  # TODO this seems to be redundant with `pytest` - it tests the same services
  # Only KAS needs it, due to some unmocked environmental deps - which we should probably solve for
  # Everything else should strive to be OK with plain/baseline `pip install && pytest`
  kas-unittest:
    runs-on: ubuntu-latest
    needs:
      - lint
      - scriptcheck
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "🐍 🧪"
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "python:3.10" scripts/monotest --coverage containers/kas/kas_app containers/kas/kas_core
      - name: SonarCloud Scan
        if: ${{ ! github.event.pull_request.head.repo.fork }}
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  pytest:
    runs-on: ubuntu-latest
    needs:
      - lint
    strategy:
      matrix:
        repo:
          - entitlement_store
          - attributes
          - entitlements
    timeout-minutes: 10
    steps:
      - name: Checkout working branch
        uses: actions/checkout@v3

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip3 install -r containers/${{ matrix.repo }}/requirements.txt
      - name: Test
        run: |
          python -m pytest containers/${{ matrix.repo }}/tests

  integration-test:
    runs-on: ubuntu-latest
    needs:
      - pytest
      - kas-unittest
      - config
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: yokawasa/action-setup-kube-tools@v0.8.0
        with:
          setup-tools: |
            kubectl
            helm
            tilt
          # This should be in sync with the minikube-deployed kube version below
          kubectl: "1.24.1"
          helm: "3.9.1"
          tilt: "0.30.4"
      - run: |
          kustomize version
          tilt version
      - name: Start Minikube
        id: minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 1.26.0
          # This should be in sync with the setup-tools version above
          kubernetes-version: 1.24.1
      - name: Get cluster versions
        run: |-
          kubectl version
          kubectl get pods -A
      - name: config ghpr with pat
        run: |-
          cd tests/containers/clients
          echo @opentdf:registry=https://npm.pkg.github.com >.npmrc
          echo //npm.pkg.github.com/:_authToken=${{ secrets.READ_PACKAGES_PAT }} >>.npmrc
      - name: Run xtest.Tiltfile
        run: |-
          export TILTFILE_FILE=xtest.Tiltfile
          echo "TILTFILE_FILE=$TILTFILE_FILE" >> $GITHUB_ENV
          tilt ci -f ${TILTFILE_FILE}
          tilt down -f ${TILTFILE_FILE}
      - name: Run pki-test.Tiltfile
        run: |-
          echo "127.0.0.1 keycloak-http" | sudo tee -a /etc/hosts
          pip3 install opentdf
          export TILTFILE_FILE=pki-test.Tiltfile
          echo "TILTFILE_FILE=$TILTFILE_FILE" >> $GITHUB_ENV
          docker system prune -af
          tilt ci -f ${TILTFILE_FILE}
      - name: Get Keycloak logs on failure
        if: failure()
        run: |-
          kubectl get pods
          # Sometimes, PKI tests only are failing randomly in CI with 400 errors when calling Keycloak.
          # This is to help debug that
          kubectl logs keycloak-0
          tilt down -f ${TILTFILE_FILE}

  publish-helm-charts:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - integration-test
      # If we publish helm charts before we finish publishing the images
      # they depend on, we can get into weirdness where the chart is pullable
      # but the images are not, yet. Avoid that.
      - build-and-publish-with-shared-base
      - build-and-publish-isolated
    permissions:
      packages: write
      contents: read
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: yokawasa/action-setup-kube-tools@v0.8.0
        with:
          setup-tools: helm
          helm: "3.9.1"
      - uses: frenck/action-setup-yq@v1.0.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: push
        run: |
          scripts/update-charts
          cd charts || exit 1
          for d in */ ; do
              if [ -f "$d/Chart.yaml" -a "$d" != "backend/" ]; then
                echo "Packaging Helm chart $d..."
                helm package $d
                echo "Packaged as" *.tgz
                helm push --debug *.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
                rm *.tgz
              fi
          done
          echo "Waiting a bit for subcharts to propagate"
          sleep 10
          echo "Updating backend chart versions"
          helm dependency update backend
          helm package backend
          echo "Packaged Helm chart [backend] as " *.tgz
          helm push --debug *.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
          rm *.tgz 
  build-base:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - integration-test
    outputs:
      digest: ${{ steps.publish.outputs.digest }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/python-base
          tags: |
            3.10
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish
        id: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            ALPINE_VERSION=3.16
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/python_base
          platforms: ${{ env.CONTAINER_ARCHS }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}

  # "isolated" - meaning these do not depend or build on `python_base`
  build-and-publish-isolated:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - integration-test
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - kas
          - keycloak-bootstrap
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            ALPINE_VERSION=3.16
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/${{ matrix.repo }}
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - integration-test
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - entitlement-pdp
          - entity-resolution
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            CONTAINER_REGISTRY=ghcr.io
          context: ./containers/${{ matrix.repo }}
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-publish-policybundle:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - integration-test
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BUNDLETAG: ghcr.io/opentdf/entitlement-pdp/entitlements-policybundle
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: Setup OPA for running policy tests
        uses: open-policy-agent/setup-opa@v1
        with:
          version: latest
      - name: Setup policy OCI bundler tool
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.0'
      - name: Build policy bundle
        if: ${{ github.event_name != 'push' || github.ref != 'refs/heads/main' || github.event.pull_request.head.repo.fork }}
        run: |
          go install github.com/opcr-io/policy/cmd/policy@latest
          cd containers/entitlement-pdp/entitlement-policy
          policy login --server=ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}
          POLICYVERSION=sha-$(git rev-parse --short HEAD) make policybuild
      - name: Publish policy bundle
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
        run: |
          go install github.com/opcr-io/policy/cmd/policy@latest
          cd containers/entitlement-pdp/entitlement-policy
          policy login --server=ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}
          POLICYVERSION=sha-$(git rev-parse --short HEAD) make policypush

  build-and-publish-with-shared-base:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - build-base
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - entitlement_store
          - attributes
          - entitlements
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            ALPINE_VERSION=3.16
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
            PYTHON_BASE_IMAGE_SELECTOR=@${{ needs.build-base.outputs.digest }}
          context: ./containers
          file: ./containers/${{ matrix.repo }}/Dockerfile
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  custom-keycloak-image:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs:
      - config
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/keycloak
          tags: |
            type=ref,event=branch
            type=sha
            type-raw,value=${{ needs.config.outputs.KEYCLOAK_OTDF_VERSION }}
      - name: Set up QEMU (required for crossbuild)
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v3
        with:
          build-args: |-
            MAVEN_VERSION=3.8.4
            JDK_VERSION=11
            CONTAINER_REGISTRY=ghcr.io
            KEYCLOAK_BASE_VERSION=${{ needs.config.outputs.KEYCLOAK_BASE_VERSION }}
          context: ./containers/keycloak-protocol-mapper
          platforms: ${{ env.CONTAINER_ARCHS }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
