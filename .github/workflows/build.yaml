name: Build Backend
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
jobs:
  helm-lint-test:
    runs-on: ubuntu-latest
    container:
      image: quay.io/helmpack/chart-testing:latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint
        run: ct lint --target-branch main --all charts/
      - name: Render Templates
        run: |
          cd charts
          for d in */ ; do
              if [ -f "$d/Chart.yaml" ]; then
                echo "Rendering Helm chart $d to validate defaults..."
                helm template "$d"
              fi
          done

  scriptcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: ü¶™ ‚úî üßºüßºüßº
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "koalaman/shellcheck:v0.8.0" --color=always scripts/*
      - name: ü¶™ ‚úÖ ü¶áü¶áü¶á
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" bats/bats:1.5.0 scripts/*.bats

  unittest:
    runs-on: ubuntu-latest
    needs:
      - scriptcheck
    steps:
      - uses: actions/checkout@v2
      - name: "üêç KAS Core Pytest"
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "python:3.9" scripts/monotest containers/kas/kas_core
      - name: "üêç KAS App Pytest"
        run: docker run --rm -v "$PWD:/mnt" --workdir "/mnt" "python:3.9" scripts/monotest containers/kas/kas_app

  build-base:
    runs-on: ubuntu-latest
    needs:
      - unittest
      - helm-lint-test
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/python-base
          tags: |
            type=ref,event=branch
            type=sha
            3.10
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/python_base
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/tdf-python-base.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: tdf-python-base
          path: /tmp/tdf-python-base.tar
      - name: Publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/python_base
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}

  build-and-publish-isolated:
    needs:
      - build-base
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - claims
          - kas
          - keycloak-bootstrap
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: tdf-python-base
          path: /tmp
      - name: Load image
        run: |-
          docker load --input /tmp/tdf-python-base.tar
          docker image ls -a
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers/${{ matrix.repo }}
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-publish-with-shared-base:
    needs:
      - build-base
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo:
          - attributes
          - entitlements
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/${{ matrix.repo }}
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: tdf-python-base
          path: /tmp
      - name: Load image
        run: |-
          docker load --input /tmp/tdf-python-base.tar
          docker image ls -a
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            ALPINE_VERSION=3.15
            CONTAINER_REGISTRY=ghcr.io
            PY_VERSION=3.10
          context: ./containers
          file: ./containers/${{ matrix.repo }}/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  custom-keycloak-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/opentdf/keycloak
          tags: |
            type=ref,event=branch
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: publish
        uses: docker/build-push-action@v2
        with:
          build-args: |-
            MAVEN_VERSION=3.8.4
            JDK_VERSION=11
            KEYCLOAK_VERSION=15.0.2
          context: ./containers/keycloak-protocol-mapper
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'opentdf/backend' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
