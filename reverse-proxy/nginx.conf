worker_processes                    1;

events {
  worker_connections                1024;
}

http {

  sendfile                          on;

  ssl_protocols                     TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers         on;

  access_log                        /dev/stdout;
  # NOTE: stderr is a keyword, as POSIX doesn't define a stderr device path
  error_log                         stderr;

  gzip                              on;
  gzip_disable                      "msie6";

  # Set resolver as Docker DNS
  resolver                          127.0.0.11 ipv6=off;

  server {
    listen                          80;
    server_name                     ${NGINX_HOST};
    location /eas {
      return 301                    https://$server_name$request_uri;
    }
    location /kas {
      return 301                    https://$server_name:4443$request_uri;
    }
  }
  # EAS
  server {
    listen                          443 ssl;
    server_name                     ${NGINX_HOST};

    ### SSL
    ssl_certificate                 /etc/nginx/server-crt.pem;
    ssl_certificate_key             /etc/nginx/server-key.pem;

    ssl_prefer_server_ciphers       on;
    ssl_ciphers                     ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;
    
    ### PKI Support
    ${IS_PKI_ON} ssl_client_certificate          /etc/nginx/ca-crt.pem;

    ${IS_PKI_ON} ssl_verify_client               on;
    ${IS_PKI_ON} ssl_verify_depth                2;
    
    location /eas/ {
      # Fix issue with Nginx proxy_pass decoding URI http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
      # Ref: https://stackoverflow.com/a/37584637
      rewrite                       ^ $request_uri;           # set $uri to the encoded URI
      rewrite                       ^/eas(.*) $1 break;       # Remove the path name
      return                        400;                      # @Security If the second rewrite won't match

      proxy_pass                    ${EAS_URL}$uri;           # Pass the encoded URI

      ### PKI Support
      ${IS_PKI_ON} if ($ssl_client_verify != SUCCESS) {
      ${IS_PKI_ON}   return 403;
      ${IS_PKI_ON} }
      ${IS_PKI_ON} proxy_set_header              ${EAS_ENTITY_ID_HEADER}   $ssl_client_s_dn;

      proxy_set_header              X-Forwarded-Proto       https;
      proxy_set_header              X-Forwarded-For         $proxy_add_x_forwarded_for;
      proxy_set_header              Host                    $http_host;
      proxy_redirect                off;
    }

    # KAS redirect
    location /kas/ {
      rewrite                       ^ $request_uri;           # set $uri to the encoded URI
      rewrite                       ^/kas(.*) $1 break;       # Remove the path name
      return                        400;                      # @Security If the second rewrite won't match

      proxy_pass                    ${KAS_URL}$uri;           # Pass the encoded URI

      proxy_set_header              X-Forwarded-Proto       https;
      proxy_set_header              X-Forwarded-For         $proxy_add_x_forwarded_for;
      proxy_set_header              Host                    $http_host;
      proxy_redirect                off;
    }

  }
  # KAS
  server {
    listen                          4443 ssl;

    ### SSL
    ssl_certificate                 /etc/nginx/server-crt.pem;
    ssl_certificate_key             /etc/nginx/server-key.pem;

    ssl_prefer_server_ciphers       on;
    ssl_ciphers                     ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;

    ### PKI Support
    ${IS_PKI_ON} ssl_client_certificate          /etc/nginx/ca-crt.pem;

    ${IS_PKI_ON} ssl_verify_client               off;
    ${IS_PKI_ON} ssl_verify_depth                2;

    location /kas/ {
      # Fix issue with Nginx proxy_pass decoding URI http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
      # Ref: https://stackoverflow.com/a/37584637
      rewrite                       ^ $request_uri;           # set $uri to the encoded URI
      rewrite                       ^/kas(.*) $1 break;       # Remove the path name
      return                        400;                      # @Security If the second rewrite won't match

      proxy_pass                    ${KAS_URL}$uri;           # Pass the encoded URI

      proxy_set_header              X-Forwarded-Proto       https;
      proxy_set_header              X-Forwarded-For         $proxy_add_x_forwarded_for;
      proxy_set_header              Host                    $http_host;
      proxy_redirect                off;
    }
  }
}
