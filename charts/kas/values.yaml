# Sets the default loglevel for the application. One of the valid python logging
# levels: `DEBUG, INFO, WARNING, ERROR, CRITICAL`
logLevel: INFO

# If the debug mode should  be enabled in flask
flaskDebug: "False"

# Sets the default number of pod replicas in the deployment.
# Ignored if autoscaling.enabled == true
replicaCount: 1

# Container image configuration.
image:
  # The image selector, also called the 'image name' in k8s documentation
  # and 'image repository' in docker's guides.
  repo: ghcr.io/opentdf/kas
  # Chart.AppVersion will be used for image tag, override here if needed
  # tag: main
  # The container's `imagePullPolicy`
  pullPolicy: IfNotPresent

# JSON passed to the deployment's template.spec.imagePullSecrets
imagePullSecrets: []

# Select a specific name for the resource, instead of the default, opentdf-claims
nameOverride: ""

# The fully qualified appname override
fullnameOverride: ""

labels:
  app: "kas"

# A service account to create
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null

# Values for the deployment spec.template.metadata.annotations field
podAnnotations: {}

# Values for deployment's spec.template.spec.securityContext
podSecurityContext: {}

# Values for deployment's spec.template.spec.containers.securityContext
securityContext: {}

# Secret containing an additional ca-cert.pem file for locally signed TLS certs.
# Used for a private PKI mode, for example.
certFileSecretName: null

# JSON to locate a k8s secret containing environment variables.
# Notably, this file should include the following environemnt variable definitions:
#     POSTGRES_PASSWORD: Password corresponding to postgres.user below
secretRef:
  name: kas-secrets

# Service configuation information.
service:
  # Service `spec.type`
  type: ClusterIP
  # Port to assign to the `http` port
  port: 8000

# Ingress configuration.
# To configure, set enabled to true and set `hosts` to a map in the form:
#
#     [hostname]:
#       [path]:
#         pathType:    your-pathtype [default: "ImplementationSpecific"]
#         serviceName: your-service  [default: service.fullname]
#         servicePort: service-port  [default: service.port above]
#  To configure HTTPS mode for mutual TLS,
#    tls:
#      certFileSecretName: your-k8s-secret
ingress:
  enabled: false
  className: null
  annotations: {}
  hosts: {}
  tls: null

# Specify required limits for deploying this service to a pod.
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube.
resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Pod disruption budget
maxUnavailable: 1

endpoints:
  # TODO rename to claimsHost or whatever
  easHost: http://opentdf-attributes:4020
  statsdHost: opentdf-statsd
  # TODO replace this with a template var instead of a hardcode when Keycloak charts are merged into opentdf/backend.
  oidcPubkeyEndpoint: http://keycloak-http

# Adds a container livenessProbe, if set.
livenessProbe:
  httpGet:
    path: /healthz?probe=liveness
    port: http

# Adds a container readinessProbe, if set.
readinessProbe:
  httpGet:
    path: /healthz?probe=readiness
    port: http
