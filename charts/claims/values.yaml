# Sets the default number of pod replicas in the deployment.
# Ignored if autoscaling.enabled == true
replicaCount: 1

# Configure the container image to use in the deployment.
image:
  # The container's `imagePullPolicy`
  pullPolicy: IfNotPresent
  # The image selector
  name: ghcr.io/opentdf/claims
# JSON passed to the deployment's template.spec.imagePullSecrets
imagePullSecrets: []

# Select a specific name for the resource, instead of the default, opentdf-claims
nameOverride: ""

# The fully qualified appname override
fullnameOverride: ""

# A service account to create
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null

# Values for the deployment spec.template.metadata.annotations field
podAnnotations: {}

# Values for deployment's spec.template.spec.securityContext
podSecurityContext:
  {}
  # fsGroup: 2000

# Values for deployment's spec.template.spec.containers.securityContext
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# JSON to locate a k8s secret containing environment variables.
# Notably, this file should include the following environemnt variable definitions:
#     POSTGRES_PASSWORD: Password corresponding to postgres.user below
#     KAS_CERTIFICATE: Public key for Key Access service
#     KAS_EC_SECP256R1_CERTIFICATE: Public key (EC Mode) for Key Access service
secretRef:
  name: claims-secrets

# Service configuation information.
service:
  # Service `spec.type`
  type: ClusterIP
  # Port to assign to the `http` port
  port: 5000

# Ingress configuration.
# To configure, set enabled to true and set `hosts` to a map in the form:
#
#     [hostname]:
#       [path]:
#         pathType:    your-pathtype [default: "ImplementationSpecific"]
#         serviceName: your-service  [default: service.fullname]
#         servicePort: service-port  [default: service.port above]
ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Specify required limits for deploying this service to a pod.
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube.
resources:
  {}
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Configuration for the database backend
postgres:
  # postgres server's k8s name or global DNS for external server
  host: localhost
  # postgres server port
  port: 5432
  # Must be a postgres user with tdf_entitlement_reader role
  user: tdf_entitlement_reader
  # The database name within the given server
  database: tdf_database
  # The entitlement schema
  schema: tdf_entitlement
keystore:
  privateKey: ""
  certificate: ""
truststore:
  kasURL: ""
  kasCertificate: ""
  kasECSECP256r1Certificate: ""
