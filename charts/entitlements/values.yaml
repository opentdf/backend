# Global values that may be overridden by a parent chart.
global:
  opentdf:
    common:
      oidcInternalHost: http://keycloak-http:8080
      oidcExternalHost: http://localhost:65432
      oidcUrlPath: auth
      # JSON passed to the deployment's template.spec.imagePullSecrets
      imagePullSecrets: []
      postgres:
        # postgres server's k8s name or global DNS for external server
        host: opentdf-postgresql
        # postgres server port
        port: 5432
        # The database name within the given server
        database: tdf_database

# Sets the default loglevel for the application. One of the valid python logging
# levels: `DEBUG, INFO, WARNING, ERROR, CRITICAL`
logLevel: INFO

# Sets the default number of pod replicas in the deployment.
# Ignored if autoscaling.enabled == true
replicaCount: 1

# Name of application. Used during oauth flows, for example when connecting to
# the OpenAPI endpoint with an OAuth authentication
serverPublicName: Entitlement

# Base path for this service. Allows serving multiple REST services from the
# same origin, e.g. using an ingress with prefix mapping as suggested below.
serverRootPath: /

# Allowed origins for CORS
serverCorsOrigins: ""

# Set to enable openapi endpoint
openapiUrl: ""

# Additional information for connecting to an OIDC provider for AuthN
# Note that you must also specify a client secret via a secretRef,
# in the form of an environment variable such as:
# OIDC_CLIENT_SECRET: myclientsecret
oidc:
  realm: tdf
  clientId: tdf-entitlement
  scopes: email

# Container image configuration.
image:
  # The image selector, also called the 'image name' in k8s documentation
  # and 'image repository' in docker's guides.
  repo: ghcr.io/opentdf/entitlements
  # Chart.AppVersion will be used for image tag, override here if needed
  # tag: main
  # The container's `imagePullPolicy`
  pullPolicy: IfNotPresent

# Select a specific name for the resource, instead of the default, opentdf-entitlements
nameOverride: ""

# The fully qualified appname override
fullnameOverride: ""

# A service account to create
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null

# Values for the deployment spec.template.metadata.annotations field
podAnnotations: {}

# Values for deployment's spec.template.spec.securityContext
podSecurityContext: {}

# Values for deployment's spec.template.spec.containers.securityContext
securityContext: {}

# JSON to locate a k8s secret containing environment variables.
# Notably, this file should include the following environemnt variable definitions:
#     POSTGRES_PASSWORD: Password corresponding to postgres.user below
secretRef:
  name: entitlements-secrets

# Service configuation information.
service:
  # Service `spec.type`
  type: ClusterIP
  # Port to assign to the `http` port
  port: 4030

# Ingress configuration.
# To configure, set enabled to true and set `hosts` to a map in the form:
#
#     [hostname]:
#       [path]:
#         pathType:    your-pathtype [default: "ImplementationSpecific"]
#         serviceName: your-service  [default: service.fullname]
#         servicePort: service-port  [default: service.port above]
ingress:
  enabled: false
  annotations: {}
  className: null
  hosts: {}
  tls: null

# Specify required limits for deploying this service to a pod.
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube.
resources: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Configuration for the database backend
postgres:
  # Must be a postgresql user with the tdf_entitlement_manager role
  user: tdf_entitlement_manager
  # The entitlement schema
  schema: tdf_entitlement
