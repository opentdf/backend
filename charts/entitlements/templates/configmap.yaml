apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "entitlements.name" . }}-cm
data:
  # TODO /auth and /token are well-known and can be hardcoded
  # we do not need two config properties for this - just one.
  OIDC_AUTHORIZATION_URL: {{ .Values.oidc.externalHost }}/realms/{{ .Values.oidc.realm}}/protocol/openid-connect/auth
  OIDC_CLIENT_ID: {{ .Values.oidc.clientId | quote }}
  OIDC_CONFIGURATION_URL: {{ .Values.oidc.internalHost }}/realms/{{ .Values.oidc.realm}}/.well-known/openid-configuration
  OIDC_REALM: {{ .Values.oidc.realm | quote }}
  OIDC_SERVER_URL: {{ .Values.oidc.internalHost | quote }}
  OIDC_TOKEN_URL: {{ .Values.oidc.externalHost }}/realms/{{ .Values.oidc.realm}}/protocol/openid-connect/token
  OIDC_SCOPES: {{ .Values.oidc.scopes | quote  }}
  OPENAPI_URL: {{ .Values.openapiUrl | quote }}
  POSTGRES_DATABASE: {{ .Values.postgres.database | quote }}
  POSTGRES_HOST: {{ .Values.postgres.host | quote }}
  POSTGRES_SCHEMA: {{ .Values.postgres.schema | quote }}
  POSTGRES_USER: {{ .Values.postgres.user | quote }}
  SERVER_LOG_LEVEL: {{ .Values.logLevel | quote }}
  SERVER_PUBLIC_NAME: {{ .Values.serverPublicName | quote }}
  SERVER_ROOT_PATH: {{ .Values.serverRootPath | quote }}
  SERVER_CORS_ORIGINS: {{ .Values.serverCorsOrigins | quote  }}
