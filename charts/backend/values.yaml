# -- Optionally override the fully qualified name
fullnameOverride: ""

# -- Optionally override the name
nameOverride: ""


embedded:
  # -- Use an embedded keycloak or not
  keycloak: true
  # -- Use an embedded postgres or not
  postgresql: true

# -- Create keycloak bootstrap secrets or not
bootstrapKeycloak: true

# Global values that may be overridden by a parent chart.
global:
  opentdf:
    common:
      # -- The cluster internal scheme + hostname for keycloak endpoint, `oidcUrlPrefix` used in constructing end urls.
      oidcInternalBaseUrl: http://keycloak-http
      # -- The url path (no preceding / ) to keycloak
      oidcUrlPath: auth
      # -- The external scheme + hostname to keycloak endpoint, `oidcUrlPrefix` used in constructing end urls.
      oidcExternalBaseUrl: http://localhost:65432
      # -- Any existing image pull secrets subcharts should use
      # e.g.
      # imagePullSecrets:
      #   - name: my-existing-ghcr-pullsecret
      #   - name: my-other-pullsecret
      imagePullSecrets: []
      # -- Enable audit logging
      auditLogEnabled: false

      keycloak:
        # -- The Keycloak admin username
        user: keycloakadmin
        # -- The Keycloak admin password
        password: mykeycloakpassword
      postgres:
        # -- postgres server's k8s name or global DNS for external server
        host: postgresql
        # -- postgres server port
        port: 5432
        # -- The database name within the given server
        database: tdf_database

secrets:
  # -- Token used to pull OPA policy from private store
  opaPolicyPullSecret:
  # -- Client secret used to verify identity in attributes and entitlements
  oidcClientSecret:
  postgres:
    # -- The postgres admin username
    dbUser: postgres
    # -- The postgres admin password
    dbPassword: otdf-pgsql-admin
  keycloakBootstrap:
    # -- Secret used for 'tdf-client' test client created by bootstrap by default
    clientSecret: 123-456
    attributes:
      # -- Username of user used to create attributes during bootstrap
      username: user1
      # -- Password of user used to create attributes during bootstap
      password: testuser123


attributes:
  # -- Optionally override the name
  fullnameOverride: attributes
  # -- JSON to locate a k8s secret containing environment variables.
  # Notably, this file should include the following environemnt variable definitions:
  #     POSTGRES_PASSWORD: Password corresponding to `attributes.postgres.user` below
  secretRef: |-
    name: "{{ template "attributes.fullname" . }}-otdf-secret"
  ingress:
    # -- Enables the Ingress
    enabled: false
    # -- Ingress annotations
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    # -- The name of the Ingress Class associated with this ingress
    className: nginx
    # -- Map in the form:
    # [hostname]:
    #   [path]:
    #     pathType:    your-pathtype [default: "ImplementationSpecific"]
    #     serviceName: your-service  [default: `service.fullname`]
    #     servicePort: service-port  [default: `service.port` above]
    hosts:
      localhost: &pathsAttributes
        "/api/attributes(/|$)(.*)":
          pathType: Prefix
      host.docker.internal: *pathsAttributes
      opentdf.local: *pathsAttributes
      '': *pathsAttributes
  # -- Sets the default loglevel for the application. One of the valid python logging
  # levels: `DEBUG, INFO, WARNING, ERROR, CRITICAL`
  logLevel: DEBUG

entitlement-pdp:
  # -- Optionally override the name
  fullnameOverride: entitlement-pdp
  opaConfig:
    policy:
      # -- If `useStaticPolicy` is set to `true`, then an OPA config will be generated
      # that forces the use of a policy bundle that was built and packed into the `entitlement-pdp`
      # container at *build* time, and no policy bundle will be fetched dynamically from the registry
      # on startup.
      # This is not a desirable default, but it is useful in offline deployments.
      # `Tilt` tries make docker image caching automagic, but it isn't particularly
      # smart about non-Docker OCI caches, so tell the PDP chart to use the default on-disk policy bundle
      # we create and pack into the image to work around this
      useStaticPolicy: true
  config:
    # -- Disable emitting OpenTelemetry traces (avoids junk timeouts if environment has no OT collector)
    disableTracing: true
  # -- JSON to locate a k8s secret containing environment variables.
  # Notably, this file should include the following environemnt variable definitions:
  #     opaPolicyPullSecret: Creds or token needed to pull OPA policy bundle
  secretRef: |-
    name: "{{ template "entitlement-pdp.fullname" . }}-otdf-secret"

entitlement-store:
  # -- Optionally override the name
  fullnameOverride: entitlement-store
  # -- JSON to locate a k8s secret containing environment variables.
  # Notably, this file should include the following environemnt variable definitions:
  #     POSTGRES_PASSWORD: Password corresponding to `entitlement-store.postgres.user` below
  secretRef: |-
    name: "{{ template "entitlement-store.fullname" . }}-otdf-secret"
  ingress:
    # -- Enables the Ingress
    enabled: false
    # -- Ingress annotations
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    # -- The name of the Ingress Class associated with this ingress
    className: nginx
    # -- Map in the form:
    # [hostname]:
    #   [path]:
    #     pathType:    your-pathtype [default: "ImplementationSpecific"]
    #     serviceName: your-service  [default: `service.fullname`]
    #     servicePort: service-port  [default: `service.port` above]
    hosts:
      localhost: &pathsEntitlementStore
        "/api/entitlement-store(/|$)(.*)":
          pathType: Prefix
      host.docker.internal: *pathsEntitlementStore
      opentdf.local: *pathsEntitlementStore
      '': *pathsEntitlementStore

entitlements:
  # -- Optionally override the name
  fullnameOverride: entitlements
  # -- JSON to locate a k8s secret containing environment variables.
  # Notably, this file should include the following environemnt variable definitions:
  #     POSTGRES_PASSWORD: Password corresponding to `entitlements.postgres.user` below
  secretRef: |-
    name: "{{ template "entitlements.fullname" . }}-otdf-secret"
  ingress:
    # -- Enables the Ingress
    enabled: false
    # -- Ingress annotations
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    # -- The name of the Ingress Class associated with this ingress
    className: nginx
    # -- Map in the form:
    # [hostname]:
    #   [path]:
    #     pathType:    your-pathtype [default: "ImplementationSpecific"]
    #     serviceName: your-service  [default: `service.fullname`]
    #     servicePort: service-port  [default: `service.port` above]
    hosts:
      localhost: &pathsEntitlements
        "/api/entitlements(/|$)(.*)":
          pathType: Prefix
      host.docker.internal: *pathsEntitlements
      opentdf.local: *pathsEntitlements
      '': *pathsEntitlements

entity-resolution:
  # -- Optionally override the name
  fullnameOverride: entity-resolution
  config:
    keycloak:
      # -- Using a legacy keycloak version. See https://github.com/Nerzal/gocloak/issues/346
      legacy: true

kas:
  # -- Optionally override the name
  fullnameOverride: kas
  endpoints:
    # -- Internal url of attributes service
    attrHost: http://attributes:4020
    # -- Internal url of statsd
    statsdHost: statsd
  # Environment configuration values for keys and certs used by the key server.  If `externalSecretName` is defined these are ignored.
  envConfig:
    # -- The public key used to validate responses from attrHost
    attrAuthorityCert:
    # -- The public key of curve secp256r1, KAS clients can use to validate responses
    ecCert:
    # -- Public key KAS clients can use to validate responses
    cert:
    # -- Private key of curve secp256r1, KAS uses to certify responses
    ecPrivKey:
    # -- Private key KAS uses to certify responses
    privKey:
  ingress:
    # -- Enables the Ingress
    enabled: false
    # -- Ingress annotations
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
    # -- The name of the Ingress Class associated with this ingress
    className: nginx
    # -- Map in the form:
    # [hostname]:
    #   [path]:
    #     pathType:    your-pathtype [default: "ImplementationSpecific"]
    #     serviceName: your-service  [default: `service.fullname`]
    #     servicePort: service-port  [default: `service.port` above]
    hosts:
      localhost: &pathsKas
        "/api/kas(/|$)(.*)":
          pathType: Prefix
      host.docker.internal: *pathsKas
      opentdf.local: *pathsKas
      '': *pathsKas
  # -- Sets the default loglevel for the application. One of the valid python logging
  # levels: `DEBUG, INFO, WARNING, ERROR, CRITICAL`
  logLevel: DEBUG
  pdp:
    # -- Enables verbose mode for the internal PDP (policy decision point) KAS uses.
    # If `true`, decisions will be logged with much additional detail
    verbose: "true"
    # -- KAS's internal Access PDP can send OpenTelemetry traces to collectors -
    # if no collectors configured, the traces will get redirected to STDOUT,
    # which is a bit spammy, so turn this off until we do proper OT trace collection everywhere.
    disableTracing: "true"

keycloak:
  # -- Optionally override the name
  fullnameOverride: keycloak
  image:
    # -- The image selector, also called the 'image name' in k8s documentation
    # and 'image repository' in docker's guides.
    repository: ghcr.io/opentdf/keycloak
    # -- The image tag
    tag: main
    # -- The container's `imagePullPolicy`
    pullPolicy: IfNotPresent
  # -- Overrides the default entrypoint of the Keycloak container
  command:
    - "/opt/keycloak/bin/kc.sh"
    - "--verbose"
    - "start-dev"
  postgresql:
    # -- If `true`, the Postgresql dependency is enabled
    enabled: false
  externalDatabase:
    # -- External database name
    database: keycloak_database
  # -- Additional environment variables for Keycloak
  extraEnv: |-
    - name: KC_LOG_LEVEL
      value: INFO
    - name: CLAIMS_URL
      value: http://entitlement-pdp:3355/entitlements
    - name: KC_DB
      value: postgres
    - name: KC_DB_URL_PORT
      value: "5432"
    - name: KC_HTTP_RELATIVE_PATH
      value: "/auth"
    - name: KC_HOSTNAME_STRICT_HTTPS
      value: "false"
    - name: KC_HOSTNAME_STRICT
      value: "false"
    - name: KC_HTTP_ENABLED
      value: "true"
    - name: KC_PROXY
      value: "edge"
    - name: JAVA_OPTS_APPEND
      value: -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless
  # -- Additional environment variables for Keycloak mapped from Secret or ConfigMap
  extraEnvFrom: |-
    - secretRef:
        name: "{{ include "keycloak.fullname" . }}-otdf-secret"
  ingress:
    # -- If `true`, an Ingress is created
    enabled: false
    # -- The name of the Ingress Class associated with this ingress
    ingressClassName: nginx
    # -- Ingress annotations
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /auth/$2
    # -- List of rules for the Ingress
    rules:
      - host: localhost
        paths: &paths
          - path: /auth(/|$)(.*)
            pathType: Prefix
      - host: host.docker.internal
        paths: *paths
      - host: opentdf.local
        paths: *paths
      - paths: *paths
        host: ''
    # -- TLS configuration
    tls: []

keycloak-bootstrap:
  # -- Optionally override the name
  fullnameOverride: keycloak-bootstrap
  # -- JSON to locate a k8s secret containing environment variables.
  # Notably, this file should include the following environemnt variable definitions:
  #     CLIENT_SECRET: default secret for "tdf-client"
  #     keycloak_admin_username: The keycloak admin username
  #     keycloak_admin_password: the keycloak admin password
  #     ATTRIBUTES_USERNAME: username used to access attributes service
  #     ATTRIBUTES_PASSWORD: password of user used to access attributes service
  secretRef: |-
    name: "{{ template "keycloak-bootstrap.fullname" . }}-otdf-secret"
  keycloak:
    # -- if provided, will use custom configuration instead
    customConfig: null
  attributes:
    # -- Internal attributes service url
    hostname: http://attributes:4020
    # -- Realm of keycloak client used to create attributes
    realm: tdf
    # -- Keycloak client id used to create attributes
    clientId: dcr-test
    # -- List of authorities to create
    preloadedAuthorities:
    - https://example.com
    # -- List of attributes to create in the form:
    #  [{authority:"", name:"", rule:"", state:"", order:[]}]
    preloadedAttributes:
    - authority: https://example.com
      name: Classification
      rule: hierarchy
      state: published
      order:
      - TS
      - S
      - C
      - U
    - authority: https://example.com
      name: COI
      rule: allOf
      state: published
      order:
      - PRX
      - PRA
      - PRB
      - PRC
      - PRD
      - PRF

  entitlements:
    # -- Internal entitlements service url
    hostname: http://entitlements:4030
    realms:
      # keycloak-bootstrap.entitlements.realms[0].name -- Name of realm for which creating entitlements
    - name: tdf
      # -- OIDC client ID used to create entitlements
      clientId: dcr-test
      # -- OIDC username used to create entitlements
      username: user1
      # -- Password for given username used to create entitlements
      password: testuser123
      # -- Entitlements to create, in the form
      # {client: ["attribute"]}
      preloadedClaims:
        alice_1234:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRD
        bob_1234:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRC
        browsertest:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRA
        client_x509:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX
        dcr-test:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRF
        service-account-tdf-client:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRB
        tdf-client:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX
          - https://example.com/attr/Env/value/CleanRoom
        tdf-user:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRX
        user1:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX

postgresql:
  # -- Optionally override the name
  fullnameOverride: postgresql
  # -- Configuration https://github.com/bitnami/charts/tree/master/bitnami/postgresql/#parameters
  image:
    # Specify if debug values should be set
    debug: true
  # -- Name of existing secret to use for PostgreSQL credentials
  existingSecret: >
    {{ include "postgresql.primary.fullname" . }}-otdf-secret
  # -- Specify the PostgreSQL username to execute the initdb scripts
  initdbUser: postgres
  # -- Secret with scripts to be run at first boot (in case it contains sensitive information)
  initdbScriptsSecret: >
    {{ include "postgresql.primary.fullname" . }}-initdb-secret
