embedded:
  keycloak: true
  postgresql: true

boostrapKeycloak: true

secrets:
  postgres:
    dbUser: postgres
    dbPassword: otdf-pgsql-admin
  keycloak:
    user: keycloakadmin
    password: mykeycloakpassword


attributes:
  fullnameOverride: opentdf-attributes
entitlement-pdp:
  opaConfig:
    policy:
      # `Tilt` tries make docker image caching automagic, but it isn't particularly
      # smart about non-Docker OCI caches, so tell the PDP chart to use the default on-disk policy bundle
      # we create and pack into the image to work around this
      useStaticPolicy: true
  config:
    disableTracing: true
entitlement-store:
  fullnameOverride: opentdf-entitlement-store
entitlements:
  fullnameOverride: opentdf-entitlements
entity-resolution:
  config:
    keycloak:
      legacy: true
kas:
  fullnameOverride: opentdf-kas

keycloak:
  fullnameOverride: keycloak
  image:
    # Keycloak is a non-OpenTDF chart, but with an OpenTDF image
    repository: ghcr.io/opentdf/keycloak
  postgresql:
    enabled: false
  externalDatabase:
    host: opentdf-postgresql
    database: keycloak_database
  extraEnv: |
    - name: CLAIMS_URL
      value: http://opentdf-entitlement-pdp:3355/entitlements
    - name: JAVA_OPTS_APPEND
      value: -Dkeycloak.profile=preview -Dkeycloak.profile.feature.token_exchange=enabled
  extraEnvFrom: |
    - secretRef:
        name: 'opentdf-keycloak-secret'
  ingress:
    enabled: true
    ingressClassName: nginx
    rules:
      - host: localhost
        paths: &paths
          - path: /auth(/|$)(.*)
            pathType: Prefix
      - host: host.docker.internal
        paths: *paths
      - host: offline.demo.internal
        paths: *paths
      - host: opentdf.local
        paths: *paths
    tls: null  

keycloak-bootstrap:
  externalUrl: http://localhost:65432

  keycloak:
    hostname: http://keycloak-http
    username: keycloakadmin
    password: mykeycloakpassword
    clientId: tdf-client
    clientSecret: 123-456
    realm: tdf 

  attributes:
    hostname: http://opentdf-attributes:4020
    realm: tdf
    clientId: dcr-test
    username: user1
    password: testuser123
    preloadedAuthorities:
    - https://example.com
    preloadedAttributes:
    - authority: https://example.com
      name: Classification
      rule: hierarchy
      state: published
      order: 
      - TS
      - S
      - C
      - U
    - authority: https://example.com
      name: COI
      rule: allOf
      state: published
      order: 
      - PRX
      - PRA
      - PRB
      - PRC
      - PRD
      - PRF

  entitlements:
    hostname: http://opentdf-entitlements:4030
    realms:
    - name: tdf
      clientId: dcr-test
      username: user1
      password: testuser123
      preloadedClaims:
        alice_1234:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRD
        bob_1234:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRC
        browsertest:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRA
        client_x509:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX
        dcr-test:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRF
        service-account-tdf-client:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRB
        tdf-client:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX
          - https://example.com/attr/Env/value/CleanRoom
        tdf-user:
          - https://example.com/attr/Classification/value/C
          - https://example.com/attr/COI/value/PRX
        user1:
          - https://example.com/attr/Classification/value/S
          - https://example.com/attr/COI/value/PRX

  job:
    backoffLimit: 20

postgresql:
  #  configuration https://github.com/bitnami/charts/tree/master/bitnami/postgresql/#parameters
  fullnameOverride: opentdf-postgresql
  image:
    debug: true
  existingSecret: opentdf-postgres-secret
  initdbUser: postgres
  initdbScripts:
    init.sql: |
      -- Keycloak DB
      CREATE DATABASE keycloak_database;

      -- Attributes and entitlements used in the Trusted Data Format
      CREATE DATABASE tdf_database;
      \connect tdf_database;

      -- performs nocase checks
      CREATE COLLATION IF NOT EXISTS NOCASE
      (
          provider = 'icu',
          locale = 'und-u-ks-level2'
      );

      CREATE SCHEMA IF NOT EXISTS tdf_attribute;
      CREATE TABLE IF NOT EXISTS tdf_attribute.attribute_namespace
      (
          id   SERIAL PRIMARY KEY,
          name VARCHAR COLLATE NOCASE NOT NULL UNIQUE
      );
      
      CREATE TABLE IF NOT EXISTS tdf_attribute.attribute
      (
          id           SERIAL PRIMARY KEY,
          namespace_id INTEGER NOT NULL REFERENCES tdf_attribute.attribute_namespace,
          state        VARCHAR NOT NULL,
          rule         VARCHAR NOT NULL,
          name         VARCHAR NOT NULL UNIQUE, -- ??? COLLATE NOCASE
          description  VARCHAR,
          values_array TEXT[],
          group_by_attr INTEGER REFERENCES tdf_attribute.attribute(id),
          group_by_attrval VARCHAR,
          CONSTRAINT no_attrval_without_attrid CHECK(group_by_attrval is not null or group_by_attr is null)
      );

      CREATE SCHEMA IF NOT EXISTS tdf_entitlement;
      CREATE TABLE IF NOT EXISTS tdf_entitlement.entity_attribute
      (
          id        SERIAL PRIMARY KEY,
          entity_id VARCHAR NOT NULL,
          namespace VARCHAR NOT NULL,
          name      VARCHAR NOT NULL,
          value     VARCHAR NOT NULL
      );

      CREATE INDEX entity_id_index ON tdf_entitlement.entity_attribute (entity_id);

      CREATE SCHEMA IF NOT EXISTS tdf_entity;
      CREATE TABLE IF NOT EXISTS tdf_entity.entity
      (
          id        SERIAL PRIMARY KEY,
          is_person BOOLEAN NOT NULL,
          state     INTEGER,
          entity_id VARCHAR,
          name      VARCHAR,
          email     VARCHAR
      );

      -- tdf_attribute
      CREATE ROLE tdf_attribute_manager WITH LOGIN PASSWORD 'myPostgresPassword';
      GRANT USAGE ON SCHEMA tdf_attribute TO tdf_attribute_manager;
      GRANT USAGE ON ALL SEQUENCES IN SCHEMA tdf_attribute TO tdf_attribute_manager;
      GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA tdf_attribute TO tdf_attribute_manager;

      -- tdf_entitlement
      CREATE ROLE tdf_entitlement_manager WITH LOGIN PASSWORD 'myPostgresPassword';
      GRANT USAGE ON SCHEMA tdf_entitlement TO tdf_entitlement_manager;
      GRANT USAGE ON ALL SEQUENCES IN SCHEMA tdf_entitlement TO tdf_entitlement_manager;
      GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA tdf_entitlement TO tdf_entitlement_manager;

      -- entitlement-store
      CREATE ROLE tdf_entitlement_reader WITH LOGIN PASSWORD 'myPostgresPassword';
      GRANT USAGE ON SCHEMA tdf_entitlement TO tdf_entitlement_reader;
      GRANT USAGE ON ALL SEQUENCES IN SCHEMA tdf_entitlement TO tdf_entitlement_reader;
      GRANT SELECT ON tdf_entitlement.entity_attribute TO tdf_entitlement_reader;

      -- tdf_entity
      CREATE ROLE tdf_entity_manager WITH LOGIN PASSWORD 'myPostgresPassword';
      GRANT USAGE ON SCHEMA tdf_entity TO tdf_entity_manager;
      GRANT USAGE ON ALL SEQUENCES IN SCHEMA tdf_entity TO tdf_entity_manager;
      GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA tdf_entity TO tdf_entity_manager;

    upgrade-1.0.0.sql: |
      -- Add groupby
      ALTER TABLE tdf_attribute.attribute ADD COLUMN IF NOT EXISTS group_by_attr INTEGER REFERENCES tdf_attribute.attribute(id);
      ALTER TABLE tdf_attribute.attribute ADD COLUMN IF NOT EXISTS group_by_attrval VARCHAR;
      ALTER TABLE tdf_attribute.attribute DROP CONSTRAINT IF EXISTS no_attrval_without_attrid;
      ALTER TABLE tdf_attribute.attribute ADD CONSTRAINT no_attrval_without_attrid CHECK(group_by_attrval is not null or group_by_attr is null)