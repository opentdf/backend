#!/usr/bin/env bash
# Run the dockerized tests. Before doing this, make sure to set some variables:
#
# export MONOLOG_LEVEL="0"
# export PY_OSS_VERSION="==1.1.0"
# export PY_VERSION="3-slim-buster"
# export NODE_VERSION="lts-buster"

APP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null && pwd)"
PROJECT_ROOT="$(cd "${APP_DIR}/../../" >/dev/null && pwd)"
export PATH="$PATH:$APP_DIR:$PROJECT_ROOT/containers/python_base/tools"

monolog INFO --- "test-in-containers"
monolog TRACE "test-in-containers"

cd "${PROJECT_ROOT}" || {
  monolog ERROR "Failed to [cd ${PROJECT_ROOT}]"
  exit 1
}

monolog DEBUG "docker --version == [$(docker --version 2>&1)]"
monolog DEBUG "docker-compose --version == [$(docker-compose --version 2>&1)]"
monolog DEBUG "npm version == [$(npm version 2>&1)]"

if ! (cd xtest && npm ci); then
  monolog ERROR "Unable to install"
  exit 1
fi

dc-down() {
  docker ps
  monolog INFO "Bringing down images for $1"
  docker-compose -f docker-compose."$1".yml down
  docker system prune --force --volumes
  rm -rf eas/db/data
  docker ps
}

export -f dc-down

do-test() {
  dc-down "$1"
  monolog INFO --- "xtest $1 in a container"
  # shellcheck disable=SC2064 # The $1 must be evaluated now, not at EXIT.
  trap "dc-down $1" EXIT
  export EAS_ATTRIBUTES_JSON=/eas_app/config/empty-array.json
  export EAS_USERS_JSON=/eas_app/config/empty-array.json
  docker-compose -f docker-compose.build.yml build python-base
  if docker-compose -f docker-compose."$1".yml up \
    --abort-on-container-exit \
    --build \
    --exit-code-from xtest-py-oss; then
    monolog TRACE "x-Test succeeded: $1"
    # clear trap
    trap - EXIT
  else
    rval=$?
    monolog WARN "X-Test failed: $1"
    exit $rval
  fi
}

if [[ "${JAVA_BUILD_ARTIFACT}" ]]; then
  if command -v buildkite-agent; then
    if ! buildkite-agent artifact download "${JAVA_BUILD_ARTIFACT}" xtest/sdk/java --build "${JAVA_BUILD_ID}" --step "${JAVA_JOB_ID}" ; then
      monolog ERROR "Unable to get artifact"
      exit 1
    fi
  elif command -v bk; then
    if ! bk artifact download "${JAVA_BUILD_ARTIFACT}" xtest/sdk/java --build "${JAVA_BUILD_ID}" --job "${JAVA_JOB_ID}" ; then
      monolog ERROR "Unable to get artifact. have you run [bk configure buildkite]?"
      exit 1
    fi
    if ! mv "${JAVA_BUILD_ARTIFACT}" "${PROJECT_ROOT}"/xtest/sdk/java ; then
      monolog ERROR "Unable to place artifact in sdk folder"
      exit 1
    fi
  else
    monolog ERROR "Please brew install bk or buildkite-agent"
  fi
fi

if [ -x "$1" ]; then
  for x in ci pki-ci; do
    do-test "$x"
  done
else
  do-test "$1"
fi
